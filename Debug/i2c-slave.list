
i2c-slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f10  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800409c  0800409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e4  080040e4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ec  080040ec  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080040f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  20000010  08004104  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  08004104  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d466  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001cbe  00000000  00000000  0002d4a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c80  00000000  00000000  0002f168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  0002fde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019103  00000000  00000000  00030970  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009d78  00000000  00000000  00049a73  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d4ae  00000000  00000000  000537eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f0c99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003314  00000000  00000000  000f0d14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004084 	.word	0x08004084

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08004084 	.word	0x08004084

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b972 	b.w	80004c8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	4688      	mov	r8, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14b      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020a:	428a      	cmp	r2, r1
 800020c:	4615      	mov	r5, r2
 800020e:	d967      	bls.n	80002e0 <__udivmoddi4+0xe4>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b14a      	cbz	r2, 800022a <__udivmoddi4+0x2e>
 8000216:	f1c2 0720 	rsb	r7, r2, #32
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	fa20 f707 	lsr.w	r7, r0, r7
 8000222:	4095      	lsls	r5, r2
 8000224:	ea47 0803 	orr.w	r8, r7, r3
 8000228:	4094      	lsls	r4, r2
 800022a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022e:	0c23      	lsrs	r3, r4, #16
 8000230:	fbb8 f7fe 	udiv	r7, r8, lr
 8000234:	fa1f fc85 	uxth.w	ip, r5
 8000238:	fb0e 8817 	mls	r8, lr, r7, r8
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	fb07 f10c 	mul.w	r1, r7, ip
 8000244:	4299      	cmp	r1, r3
 8000246:	d909      	bls.n	800025c <__udivmoddi4+0x60>
 8000248:	18eb      	adds	r3, r5, r3
 800024a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024e:	f080 811b 	bcs.w	8000488 <__udivmoddi4+0x28c>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 8118 	bls.w	8000488 <__udivmoddi4+0x28c>
 8000258:	3f02      	subs	r7, #2
 800025a:	442b      	add	r3, r5
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0fe 	udiv	r0, r3, lr
 8000264:	fb0e 3310 	mls	r3, lr, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000270:	45a4      	cmp	ip, r4
 8000272:	d909      	bls.n	8000288 <__udivmoddi4+0x8c>
 8000274:	192c      	adds	r4, r5, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x290>
 800027e:	45a4      	cmp	ip, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x290>
 8000284:	3802      	subs	r0, #2
 8000286:	442c      	add	r4, r5
 8000288:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028c:	eba4 040c 	sub.w	r4, r4, ip
 8000290:	2700      	movs	r7, #0
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa0>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	4639      	mov	r1, r7
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xbe>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80eb 	beq.w	8000482 <__udivmoddi4+0x286>
 80002ac:	2700      	movs	r7, #0
 80002ae:	e9c6 0100 	strd	r0, r1, [r6]
 80002b2:	4638      	mov	r0, r7
 80002b4:	4639      	mov	r1, r7
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f783 	clz	r7, r3
 80002be:	2f00      	cmp	r7, #0
 80002c0:	d147      	bne.n	8000352 <__udivmoddi4+0x156>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd0>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80fa 	bhi.w	80004c0 <__udivmoddi4+0x2c4>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4698      	mov	r8, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa0>
 80002da:	e9c6 4800 	strd	r4, r8, [r6]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa0>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xe8>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 808f 	bne.w	800040c <__udivmoddi4+0x210>
 80002ee:	1b49      	subs	r1, r1, r5
 80002f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f4:	fa1f f885 	uxth.w	r8, r5
 80002f8:	2701      	movs	r7, #1
 80002fa:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fe:	0c23      	lsrs	r3, r4, #16
 8000300:	fb0e 111c 	mls	r1, lr, ip, r1
 8000304:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000308:	fb08 f10c 	mul.w	r1, r8, ip
 800030c:	4299      	cmp	r1, r3
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x124>
 8000310:	18eb      	adds	r3, r5, r3
 8000312:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4299      	cmp	r1, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2bc>
 800031e:	4684      	mov	ip, r0
 8000320:	1a59      	subs	r1, r3, r1
 8000322:	b2a3      	uxth	r3, r4
 8000324:	fbb1 f0fe 	udiv	r0, r1, lr
 8000328:	fb0e 1410 	mls	r4, lr, r0, r1
 800032c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000330:	fb08 f800 	mul.w	r8, r8, r0
 8000334:	45a0      	cmp	r8, r4
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x14c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x14a>
 8000340:	45a0      	cmp	r8, r4
 8000342:	f200 80b6 	bhi.w	80004b2 <__udivmoddi4+0x2b6>
 8000346:	4618      	mov	r0, r3
 8000348:	eba4 0408 	sub.w	r4, r4, r8
 800034c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000350:	e79f      	b.n	8000292 <__udivmoddi4+0x96>
 8000352:	f1c7 0c20 	rsb	ip, r7, #32
 8000356:	40bb      	lsls	r3, r7
 8000358:	fa22 fe0c 	lsr.w	lr, r2, ip
 800035c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000360:	fa01 f407 	lsl.w	r4, r1, r7
 8000364:	fa20 f50c 	lsr.w	r5, r0, ip
 8000368:	fa21 f30c 	lsr.w	r3, r1, ip
 800036c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000370:	4325      	orrs	r5, r4
 8000372:	fbb3 f9f8 	udiv	r9, r3, r8
 8000376:	0c2c      	lsrs	r4, r5, #16
 8000378:	fb08 3319 	mls	r3, r8, r9, r3
 800037c:	fa1f fa8e 	uxth.w	sl, lr
 8000380:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000384:	fb09 f40a 	mul.w	r4, r9, sl
 8000388:	429c      	cmp	r4, r3
 800038a:	fa02 f207 	lsl.w	r2, r2, r7
 800038e:	fa00 f107 	lsl.w	r1, r0, r7
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1e 0303 	adds.w	r3, lr, r3
 8000398:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800039c:	f080 8087 	bcs.w	80004ae <__udivmoddi4+0x2b2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f240 8084 	bls.w	80004ae <__udivmoddi4+0x2b2>
 80003a6:	f1a9 0902 	sub.w	r9, r9, #2
 80003aa:	4473      	add	r3, lr
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	b2ad      	uxth	r5, r5
 80003b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b4:	fb08 3310 	mls	r3, r8, r0, r3
 80003b8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003bc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c0:	45a2      	cmp	sl, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1e 0404 	adds.w	r4, lr, r4
 80003c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003cc:	d26b      	bcs.n	80004a6 <__udivmoddi4+0x2aa>
 80003ce:	45a2      	cmp	sl, r4
 80003d0:	d969      	bls.n	80004a6 <__udivmoddi4+0x2aa>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4474      	add	r4, lr
 80003d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003da:	fba0 8902 	umull	r8, r9, r0, r2
 80003de:	eba4 040a 	sub.w	r4, r4, sl
 80003e2:	454c      	cmp	r4, r9
 80003e4:	46c2      	mov	sl, r8
 80003e6:	464b      	mov	r3, r9
 80003e8:	d354      	bcc.n	8000494 <__udivmoddi4+0x298>
 80003ea:	d051      	beq.n	8000490 <__udivmoddi4+0x294>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2c8>
 80003f0:	ebb1 050a 	subs.w	r5, r1, sl
 80003f4:	eb64 0403 	sbc.w	r4, r4, r3
 80003f8:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003fc:	40fd      	lsrs	r5, r7
 80003fe:	40fc      	lsrs	r4, r7
 8000400:	ea4c 0505 	orr.w	r5, ip, r5
 8000404:	e9c6 5400 	strd	r5, r4, [r6]
 8000408:	2700      	movs	r7, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa0>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f703 	lsr.w	r7, r0, r3
 8000414:	4095      	lsls	r5, r2
 8000416:	fa01 f002 	lsl.w	r0, r1, r2
 800041a:	fa21 f303 	lsr.w	r3, r1, r3
 800041e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000422:	4338      	orrs	r0, r7
 8000424:	0c01      	lsrs	r1, r0, #16
 8000426:	fbb3 f7fe 	udiv	r7, r3, lr
 800042a:	fa1f f885 	uxth.w	r8, r5
 800042e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000432:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000436:	fb07 f308 	mul.w	r3, r7, r8
 800043a:	428b      	cmp	r3, r1
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x256>
 8000442:	1869      	adds	r1, r5, r1
 8000444:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000448:	d22f      	bcs.n	80004aa <__udivmoddi4+0x2ae>
 800044a:	428b      	cmp	r3, r1
 800044c:	d92d      	bls.n	80004aa <__udivmoddi4+0x2ae>
 800044e:	3f02      	subs	r7, #2
 8000450:	4429      	add	r1, r5
 8000452:	1acb      	subs	r3, r1, r3
 8000454:	b281      	uxth	r1, r0
 8000456:	fbb3 f0fe 	udiv	r0, r3, lr
 800045a:	fb0e 3310 	mls	r3, lr, r0, r3
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb00 f308 	mul.w	r3, r0, r8
 8000466:	428b      	cmp	r3, r1
 8000468:	d907      	bls.n	800047a <__udivmoddi4+0x27e>
 800046a:	1869      	adds	r1, r5, r1
 800046c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000470:	d217      	bcs.n	80004a2 <__udivmoddi4+0x2a6>
 8000472:	428b      	cmp	r3, r1
 8000474:	d915      	bls.n	80004a2 <__udivmoddi4+0x2a6>
 8000476:	3802      	subs	r0, #2
 8000478:	4429      	add	r1, r5
 800047a:	1ac9      	subs	r1, r1, r3
 800047c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000480:	e73b      	b.n	80002fa <__udivmoddi4+0xfe>
 8000482:	4637      	mov	r7, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e709      	b.n	800029c <__udivmoddi4+0xa0>
 8000488:	4607      	mov	r7, r0
 800048a:	e6e7      	b.n	800025c <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x8c>
 8000490:	4541      	cmp	r1, r8
 8000492:	d2ab      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000494:	ebb8 0a02 	subs.w	sl, r8, r2
 8000498:	eb69 020e 	sbc.w	r2, r9, lr
 800049c:	3801      	subs	r0, #1
 800049e:	4613      	mov	r3, r2
 80004a0:	e7a4      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a2:	4660      	mov	r0, ip
 80004a4:	e7e9      	b.n	800047a <__udivmoddi4+0x27e>
 80004a6:	4618      	mov	r0, r3
 80004a8:	e795      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004aa:	4667      	mov	r7, ip
 80004ac:	e7d1      	b.n	8000452 <__udivmoddi4+0x256>
 80004ae:	4681      	mov	r9, r0
 80004b0:	e77c      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b2:	3802      	subs	r0, #2
 80004b4:	442c      	add	r4, r5
 80004b6:	e747      	b.n	8000348 <__udivmoddi4+0x14c>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	442b      	add	r3, r5
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x124>
 80004c0:	4638      	mov	r0, r7
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xda>
 80004c4:	4637      	mov	r7, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa0>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <HAL_I2C_SlaveTxCpltCallback>:
	I2C_STATUS_ABORTCPLT,
};
enum i2c_status i2c_status = I2C_STATUS_UNSET;

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	i2c_status = I2C_STATUS_SLAVETXCPLT;
 80004d4:	4b04      	ldr	r3, [pc, #16]	; (80004e8 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	2000002d 	.word	0x2000002d

080004ec <HAL_I2C_SlaveRxCpltCallback>:
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
	i2c_status = I2C_STATUS_SLAVERXCPLT;
 80004f4:	4b04      	ldr	r3, [pc, #16]	; (8000508 <HAL_I2C_SlaveRxCpltCallback+0x1c>)
 80004f6:	2202      	movs	r2, #2
 80004f8:	701a      	strb	r2, [r3, #0]
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	2000002d 	.word	0x2000002d

0800050c <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	i2c_status = I2C_STATUS_ERROR;
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_I2C_ErrorCallback+0x1c>)
 8000516:	2203      	movs	r2, #3
 8000518:	701a      	strb	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	2000002d 	.word	0x2000002d

0800052c <HAL_I2C_AbortCpltCallback>:
void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	i2c_status = I2C_STATUS_ABORTCPLT;
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <HAL_I2C_AbortCpltCallback+0x1c>)
 8000536:	2204      	movs	r2, #4
 8000538:	701a      	strb	r2, [r3, #0]

}
 800053a:	bf00      	nop
 800053c:	370c      	adds	r7, #12
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	2000002d 	.word	0x2000002d

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fae7 	bl	8000b22 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f850 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f92c 	bl	80007b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055c:	f000 f8fa 	bl	8000754 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000560:	f000 f8b8 	bl	80006d4 <MX_I2C1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  HAL_I2C_Slave_Receive_IT(&hi2c1, &pData, Size);
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <main+0x98>)
 8000566:	881b      	ldrh	r3, [r3, #0]
 8000568:	461a      	mov	r2, r3
 800056a:	491f      	ldr	r1, [pc, #124]	; (80005e8 <main+0x9c>)
 800056c:	481f      	ldr	r0, [pc, #124]	; (80005ec <main+0xa0>)
 800056e:	f000 ff17 	bl	80013a0 <HAL_I2C_Slave_Receive_IT>
  while (1)
  {
	  switch(i2c_status) {
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <main+0xa4>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d8fb      	bhi.n	8000572 <main+0x26>
 800057a:	a201      	add	r2, pc, #4	; (adr r2, 8000580 <main+0x34>)
 800057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000580:	08000573 	.word	0x08000573
 8000584:	08000595 	.word	0x08000595
 8000588:	080005ab 	.word	0x080005ab
 800058c:	080005cd 	.word	0x080005cd
 8000590:	080005cd 	.word	0x080005cd
	  case I2C_STATUS_SLAVETXCPLT:
		  HAL_I2C_Slave_Receive_IT(&hi2c1, &pData, Size);
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <main+0x98>)
 8000596:	881b      	ldrh	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4913      	ldr	r1, [pc, #76]	; (80005e8 <main+0x9c>)
 800059c:	4813      	ldr	r0, [pc, #76]	; (80005ec <main+0xa0>)
 800059e:	f000 feff 	bl	80013a0 <HAL_I2C_Slave_Receive_IT>
		  i2c_status = I2C_STATUS_UNSET;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <main+0xa4>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
		  break;
 80005a8:	e01b      	b.n	80005e2 <main+0x96>
	  case I2C_STATUS_SLAVERXCPLT:
		  counter = pData + 1;
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <main+0x9c>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	3301      	adds	r3, #1
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	4b10      	ldr	r3, [pc, #64]	; (80005f4 <main+0xa8>)
 80005b4:	701a      	strb	r2, [r3, #0]
		  HAL_I2C_Slave_Transmit_IT(&hi2c1, &counter, Size);
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <main+0x98>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	461a      	mov	r2, r3
 80005bc:	490d      	ldr	r1, [pc, #52]	; (80005f4 <main+0xa8>)
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <main+0xa0>)
 80005c0:	f000 fe9e 	bl	8001300 <HAL_I2C_Slave_Transmit_IT>
		  i2c_status = I2C_STATUS_UNSET;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <main+0xa4>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
		  break;
 80005ca:	e00a      	b.n	80005e2 <main+0x96>
	  case I2C_STATUS_UNSET: break;
	  case I2C_STATUS_ERROR:
	  case I2C_STATUS_ABORTCPLT:
		  HAL_I2C_Slave_Receive_IT(&hi2c1, &pData, Size);
 80005cc:	4b05      	ldr	r3, [pc, #20]	; (80005e4 <main+0x98>)
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4905      	ldr	r1, [pc, #20]	; (80005e8 <main+0x9c>)
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <main+0xa0>)
 80005d6:	f000 fee3 	bl	80013a0 <HAL_I2C_Slave_Receive_IT>
		  i2c_status = I2C_STATUS_UNSET;
 80005da:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <main+0xa4>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
		  break;
 80005e0:	bf00      	nop
	  switch(i2c_status) {
 80005e2:	e7c6      	b.n	8000572 <main+0x26>
 80005e4:	20000000 	.word	0x20000000
 80005e8:	2000002c 	.word	0x2000002c
 80005ec:	20000030 	.word	0x20000030
 80005f0:	2000002d 	.word	0x2000002d
 80005f4:	2000007c 	.word	0x2000007c

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0a4      	sub	sp, #144	; 0x90
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000602:	2244      	movs	r2, #68	; 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fd34 	bl	8004074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2234      	movs	r2, #52	; 0x34
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fd26 	bl	8004074 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000628:	f002 f8a6 	bl	8002778 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xd8>)
 800062e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000632:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <SystemClock_Config+0xd8>)
 8000634:	f023 0318 	bic.w	r3, r3, #24
 8000638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000640:	f002 f8b8 	bl	80027b4 <HAL_PWREx_ControlVoltageScaling>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800064a:	f000 f8fd 	bl	8000848 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800064e:	2314      	movs	r3, #20
 8000650:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000652:	2301      	movs	r3, #1
 8000654:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000656:	2301      	movs	r3, #1
 8000658:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 800065e:	23a0      	movs	r3, #160	; 0xa0
 8000660:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000662:	2300      	movs	r3, #0
 8000664:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800066a:	4618      	mov	r0, r3
 800066c:	f002 f8f8 	bl	8002860 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000676:	f000 f8e7 	bl	8000848 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800067e:	2300      	movs	r3, #0
 8000680:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	64bb      	str	r3, [r7, #72]	; 0x48

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800068e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000692:	2101      	movs	r1, #1
 8000694:	4618      	mov	r0, r3
 8000696:	f002 fd49 	bl	800312c <HAL_RCC_ClockConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80006a0:	f000 f8d2 	bl	8000848 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80006a4:	2342      	movs	r3, #66	; 0x42
 80006a6:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 ff3e 	bl	8003534 <HAL_RCCEx_PeriphCLKConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006be:	f000 f8c3 	bl	8000848 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c2:	f003 f8bd 	bl	8003840 <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c6:	bf00      	nop
 80006c8:	3790      	adds	r7, #144	; 0x90
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6010C7FF;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <MX_I2C1_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 4;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_I2C1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_I2C1_Init+0x74>)
 8000710:	f000 fd66 	bl	80011e0 <HAL_I2C_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 f895 	bl	8000848 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C1_Init+0x74>)
 8000722:	f001 ff91 	bl	8002648 <HAL_I2CEx_ConfigAnalogFilter>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 f88c 	bl	8000848 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_I2C1_Init+0x74>)
 8000734:	f001 ffd3 	bl	80026de <HAL_I2CEx_ConfigDigitalFilter>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f883 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000030 	.word	0x20000030
 800074c:	40005400 	.word	0x40005400
 8000750:	6010c7ff 	.word	0x6010c7ff

08000754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <MX_USART2_UART_Init+0x5c>)
 800075c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000768:	2200      	movs	r2, #0
 800076a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800076c:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800077a:	220c      	movs	r2, #12
 800077c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000786:	2200      	movs	r2, #0
 8000788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_USART2_UART_Init+0x58>)
 8000798:	f003 f862 	bl	8003860 <HAL_UART_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007a2:	f000 f851 	bl	8000848 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000080 	.word	0x20000080
 80007b0:	40004400 	.word	0x40004400

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b088      	sub	sp, #32
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 030c 	add.w	r3, r7, #12
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_GPIO_Init+0x8c>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <MX_GPIO_Init+0x8c>)
 80007d0:	f043 0304 	orr.w	r3, r3, #4
 80007d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_GPIO_Init+0x8c>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007da:	f003 0304 	and.w	r3, r3, #4
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	4b17      	ldr	r3, [pc, #92]	; (8000840 <MX_GPIO_Init+0x8c>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e6:	4a16      	ldr	r2, [pc, #88]	; (8000840 <MX_GPIO_Init+0x8c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ee:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_GPIO_Init+0x8c>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_GPIO_Init+0x8c>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <MX_GPIO_Init+0x8c>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_GPIO_Init+0x8c>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	2108      	movs	r1, #8
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <MX_GPIO_Init+0x90>)
 8000818:	f000 fcca 	bl	80011b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800081c:	2308      	movs	r3, #8
 800081e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800082c:	f107 030c 	add.w	r3, r7, #12
 8000830:	4619      	mov	r1, r3
 8000832:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_GPIO_Init+0x90>)
 8000834:	f000 fb4a 	bl	8000ecc <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3720      	adds	r7, #32
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40021000 	.word	0x40021000
 8000844:	48000400 	.word	0x48000400

08000848 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800084c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084e:	e7fe      	b.n	800084e <Error_Handler+0x6>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <HAL_MspInit+0x44>)
 8000858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085a:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <HAL_MspInit+0x44>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6613      	str	r3, [r2, #96]	; 0x60
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <HAL_MspInit+0x44>)
 8000864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_MspInit+0x44>)
 8000870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000872:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_MspInit+0x44>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	6593      	str	r3, [r2, #88]	; 0x58
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <HAL_MspInit+0x44>)
 800087c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08a      	sub	sp, #40	; 0x28
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	f107 0314 	add.w	r3, r7, #20
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a20      	ldr	r2, [pc, #128]	; (8000938 <HAL_I2C_MspInit+0xa0>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d139      	bne.n	800092e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b20      	ldr	r3, [pc, #128]	; (800093c <HAL_I2C_MspInit+0xa4>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <HAL_I2C_MspInit+0xa4>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_I2C_MspInit+0xa4>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008d8:	2312      	movs	r3, #18
 80008da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008e4:	2304      	movs	r3, #4
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f2:	f000 faeb 	bl	8000ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <HAL_I2C_MspInit+0xa4>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <HAL_I2C_MspInit+0xa4>)
 80008fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000900:	6593      	str	r3, [r2, #88]	; 0x58
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <HAL_I2C_MspInit+0xa4>)
 8000904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000906:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	201f      	movs	r0, #31
 8000914:	f000 fa55 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000918:	201f      	movs	r0, #31
 800091a:	f000 fa6e 	bl	8000dfa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2020      	movs	r0, #32
 8000924:	f000 fa4d 	bl	8000dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000928:	2020      	movs	r0, #32
 800092a:	f000 fa66 	bl	8000dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	; 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40005400 	.word	0x40005400
 800093c:	40021000 	.word	0x40021000

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a20      	ldr	r2, [pc, #128]	; (80009e0 <HAL_UART_MspInit+0xa0>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d13a      	bne.n	80009d8 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <HAL_UART_MspInit+0xa4>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <HAL_UART_MspInit+0xa4>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	6593      	str	r3, [r2, #88]	; 0x58
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <HAL_UART_MspInit+0xa4>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_UART_MspInit+0xa4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a19      	ldr	r2, [pc, #100]	; (80009e4 <HAL_UART_MspInit+0xa4>)
 8000980:	f043 0301 	orr.w	r3, r3, #1
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b17      	ldr	r3, [pc, #92]	; (80009e4 <HAL_UART_MspInit+0xa4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000992:	2304      	movs	r3, #4
 8000994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a2:	2307      	movs	r3, #7
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 0314 	add.w	r3, r7, #20
 80009aa:	4619      	mov	r1, r3
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b0:	f000 fa8c 	bl	8000ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009c6:	2303      	movs	r3, #3
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d4:	f000 fa7a 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d8:	bf00      	nop
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40004400 	.word	0x40004400
 80009e4:	40021000 	.word	0x40021000

080009e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler+0x4>

080009ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f2:	e7fe      	b.n	80009f2 <HardFault_Handler+0x4>

080009f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f8:	e7fe      	b.n	80009f8 <MemManage_Handler+0x4>

080009fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fe:	e7fe      	b.n	80009fe <BusFault_Handler+0x4>

08000a00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <UsageFault_Handler+0x4>

08000a06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f8ca 	bl	8000bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a40:	4802      	ldr	r0, [pc, #8]	; (8000a4c <I2C1_EV_IRQHandler+0x10>)
 8000a42:	f000 fcfd 	bl	8001440 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000030 	.word	0x20000030

08000a50 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <I2C1_ER_IRQHandler+0x10>)
 8000a56:	f000 fd0d 	bl	8001474 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000030 	.word	0x20000030

08000a64 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <SystemInit+0x64>)
 8000a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a6e:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <SystemInit+0x64>)
 8000a70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <SystemInit+0x68>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a13      	ldr	r2, [pc, #76]	; (8000acc <SystemInit+0x68>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <SystemInit+0x68>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <SystemInit+0x68>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <SystemInit+0x68>)
 8000a90:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a94:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a98:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <SystemInit+0x68>)
 8000a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000aa0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <SystemInit+0x68>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a09      	ldr	r2, [pc, #36]	; (8000acc <SystemInit+0x68>)
 8000aa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aac:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <SystemInit+0x68>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <SystemInit+0x64>)
 8000ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aba:	609a      	str	r2, [r3, #8]
#endif
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000ed00 	.word	0xe000ed00
 8000acc:	40021000 	.word	0x40021000

08000ad0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b08 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad4:	f7ff ffc6 	bl	8000a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ad8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ada:	e003      	b.n	8000ae4 <LoopCopyDataInit>

08000adc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000adc:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ade:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ae0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000ae2:	3104      	adds	r1, #4

08000ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ae4:	480a      	ldr	r0, [pc, #40]	; (8000b10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ae8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000aea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000aec:	d3f6      	bcc.n	8000adc <CopyDataInit>
	ldr	r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000af0:	e002      	b.n	8000af8 <LoopFillZerobss>

08000af2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000af2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000af4:	f842 3b04 	str.w	r3, [r2], #4

08000af8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <LoopForever+0x16>)
	cmp	r2, r3
 8000afa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000afc:	d3f9      	bcc.n	8000af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000afe:	f003 fa95 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b02:	f7ff fd23 	bl	800054c <main>

08000b06 <LoopForever>:

LoopForever:
    b LoopForever
 8000b06:	e7fe      	b.n	8000b06 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b08:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 8000b0c:	080040f4 	.word	0x080040f4
	ldr	r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b14:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000b18:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b1c:	20000108 	.word	0x20000108

08000b20 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC1_2_IRQHandler>

08000b22 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b082      	sub	sp, #8
 8000b26:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b2c:	2003      	movs	r0, #3
 8000b2e:	f000 f93d 	bl	8000dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b32:	2000      	movs	r0, #0
 8000b34:	f000 f80e 	bl	8000b54 <HAL_InitTick>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	71fb      	strb	r3, [r7, #7]
 8000b42:	e001      	b.n	8000b48 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b44:	f7ff fe84 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b48:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <HAL_InitTick+0x6c>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d023      	beq.n	8000bb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_InitTick+0x70>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <HAL_InitTick+0x6c>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f949 	bl	8000e16 <HAL_SYSTICK_Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d10f      	bne.n	8000baa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2b0f      	cmp	r3, #15
 8000b8e:	d809      	bhi.n	8000ba4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b90:	2200      	movs	r2, #0
 8000b92:	6879      	ldr	r1, [r7, #4]
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b98:	f000 f913 	bl	8000dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b9c:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <HAL_InitTick+0x74>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	e007      	b.n	8000bb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	73fb      	strb	r3, [r7, #15]
 8000ba8:	e004      	b.n	8000bb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	e001      	b.n	8000bb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000000c 	.word	0x2000000c
 8000bc4:	20000004 	.word	0x20000004
 8000bc8:	20000008 	.word	0x20000008

08000bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x20>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4413      	add	r3, r2
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_IncTick+0x24>)
 8000bde:	6013      	str	r3, [r2, #0]
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	2000000c 	.word	0x2000000c
 8000bf0:	20000104 	.word	0x20000104

08000bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf8:	4b03      	ldr	r3, [pc, #12]	; (8000c08 <HAL_GetTick+0x14>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	20000104 	.word	0x20000104

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	db0b      	blt.n	8000c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 021f 	and.w	r2, r3, #31
 8000c88:	4907      	ldr	r1, [pc, #28]	; (8000ca8 <__NVIC_EnableIRQ+0x38>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	095b      	lsrs	r3, r3, #5
 8000c90:	2001      	movs	r0, #1
 8000c92:	fa00 f202 	lsl.w	r2, r0, r2
 8000c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d78:	d301      	bcc.n	8000d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e00f      	b.n	8000d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7e:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <SysTick_Config+0x40>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	3b01      	subs	r3, #1
 8000d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d86:	210f      	movs	r1, #15
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d8c:	f7ff ff8e 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <SysTick_Config+0x40>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d96:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <SysTick_Config+0x40>)
 8000d98:	2207      	movs	r2, #7
 8000d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	e000e010 	.word	0xe000e010

08000dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f7ff ff29 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b086      	sub	sp, #24
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60b9      	str	r1, [r7, #8]
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd4:	f7ff ff3e 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	68b9      	ldr	r1, [r7, #8]
 8000dde:	6978      	ldr	r0, [r7, #20]
 8000de0:	f7ff ff8e 	bl	8000d00 <NVIC_EncodePriority>
 8000de4:	4602      	mov	r2, r0
 8000de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dea:	4611      	mov	r1, r2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff5d 	bl	8000cac <__NVIC_SetPriority>
}
 8000df2:	bf00      	nop
 8000df4:	3718      	adds	r7, #24
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff31 	bl	8000c70 <__NVIC_EnableIRQ>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff ffa2 	bl	8000d68 <SysTick_Config>
 8000e24:	4603      	mov	r3, r0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d005      	beq.n	8000e52 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2204      	movs	r2, #4
 8000e4a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e029      	b.n	8000ea6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f022 020e 	bic.w	r2, r2, #14
 8000e60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f022 0201 	bic.w	r2, r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f003 021c 	and.w	r2, r3, #28
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fa01 f202 	lsl.w	r2, r1, r2
 8000e84:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d003      	beq.n	8000ea6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	4798      	blx	r3
    }
  }
  return status;
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ebe:	b2db      	uxtb	r3, r3
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b087      	sub	sp, #28
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eda:	e14e      	b.n	800117a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 8140 	beq.w	8001174 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d00b      	beq.n	8000f14 <HAL_GPIO_Init+0x48>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b02      	cmp	r3, #2
 8000f02:	d007      	beq.n	8000f14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f08:	2b11      	cmp	r3, #17
 8000f0a:	d003      	beq.n	8000f14 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	2b12      	cmp	r3, #18
 8000f12:	d130      	bne.n	8000f76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	2203      	movs	r2, #3
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	68da      	ldr	r2, [r3, #12]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	091b      	lsrs	r3, r3, #4
 8000f60:	f003 0201 	and.w	r2, r3, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0xea>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b12      	cmp	r3, #18
 8000fb4:	d123      	bne.n	8000ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	08da      	lsrs	r2, r3, #3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3208      	adds	r2, #8
 8000fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	691a      	ldr	r2, [r3, #16]
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f003 0307 	and.w	r3, r3, #7
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	08da      	lsrs	r2, r3, #3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3208      	adds	r2, #8
 8000ff8:	6939      	ldr	r1, [r7, #16]
 8000ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	2203      	movs	r2, #3
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0203 	and.w	r2, r3, #3
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 809a 	beq.w	8001174 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001040:	4b55      	ldr	r3, [pc, #340]	; (8001198 <HAL_GPIO_Init+0x2cc>)
 8001042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001044:	4a54      	ldr	r2, [pc, #336]	; (8001198 <HAL_GPIO_Init+0x2cc>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6613      	str	r3, [r2, #96]	; 0x60
 800104c:	4b52      	ldr	r3, [pc, #328]	; (8001198 <HAL_GPIO_Init+0x2cc>)
 800104e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001050:	f003 0301 	and.w	r3, r3, #1
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001058:	4a50      	ldr	r2, [pc, #320]	; (800119c <HAL_GPIO_Init+0x2d0>)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	089b      	lsrs	r3, r3, #2
 800105e:	3302      	adds	r3, #2
 8001060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	220f      	movs	r2, #15
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001082:	d013      	beq.n	80010ac <HAL_GPIO_Init+0x1e0>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a46      	ldr	r2, [pc, #280]	; (80011a0 <HAL_GPIO_Init+0x2d4>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d00d      	beq.n	80010a8 <HAL_GPIO_Init+0x1dc>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a45      	ldr	r2, [pc, #276]	; (80011a4 <HAL_GPIO_Init+0x2d8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d007      	beq.n	80010a4 <HAL_GPIO_Init+0x1d8>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a44      	ldr	r2, [pc, #272]	; (80011a8 <HAL_GPIO_Init+0x2dc>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d101      	bne.n	80010a0 <HAL_GPIO_Init+0x1d4>
 800109c:	2303      	movs	r3, #3
 800109e:	e006      	b.n	80010ae <HAL_GPIO_Init+0x1e2>
 80010a0:	2307      	movs	r3, #7
 80010a2:	e004      	b.n	80010ae <HAL_GPIO_Init+0x1e2>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e002      	b.n	80010ae <HAL_GPIO_Init+0x1e2>
 80010a8:	2301      	movs	r3, #1
 80010aa:	e000      	b.n	80010ae <HAL_GPIO_Init+0x1e2>
 80010ac:	2300      	movs	r3, #0
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	f002 0203 	and.w	r2, r2, #3
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	4093      	lsls	r3, r2
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010be:	4937      	ldr	r1, [pc, #220]	; (800119c <HAL_GPIO_Init+0x2d0>)
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010cc:	4b37      	ldr	r3, [pc, #220]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010f0:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80010f6:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	43db      	mvns	r3, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4013      	ands	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800111a:	4a24      	ldr	r2, [pc, #144]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43db      	mvns	r3, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4013      	ands	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43db      	mvns	r3, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116e:	4a0f      	ldr	r2, [pc, #60]	; (80011ac <HAL_GPIO_Init+0x2e0>)
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3301      	adds	r3, #1
 8001178:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	fa22 f303 	lsr.w	r3, r2, r3
 8001184:	2b00      	cmp	r3, #0
 8001186:	f47f aea9 	bne.w	8000edc <HAL_GPIO_Init+0x10>
  }
}
 800118a:	bf00      	nop
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40021000 	.word	0x40021000
 800119c:	40010000 	.word	0x40010000
 80011a0:	48000400 	.word	0x48000400
 80011a4:	48000800 	.word	0x48000800
 80011a8:	48000c00 	.word	0x48000c00
 80011ac:	40010400 	.word	0x40010400

080011b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	460b      	mov	r3, r1
 80011ba:	807b      	strh	r3, [r7, #2]
 80011bc:	4613      	mov	r3, r2
 80011be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c0:	787b      	ldrb	r3, [r7, #1]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d003      	beq.n	80011ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c6:	887a      	ldrh	r2, [r7, #2]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ce:	887a      	ldrh	r2, [r7, #2]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e081      	b.n	80012f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d106      	bne.n	800120c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fb46 	bl	8000898 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2224      	movs	r2, #36	; 0x24
 8001210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f022 0201 	bic.w	r2, r2, #1
 8001222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001230:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001240:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d107      	bne.n	800125a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689a      	ldr	r2, [r3, #8]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	e006      	b.n	8001268 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	689a      	ldr	r2, [r3, #8]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001266:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	2b02      	cmp	r3, #2
 800126e:	d104      	bne.n	800127a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001278:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	687a      	ldr	r2, [r7, #4]
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001288:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800128c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68da      	ldr	r2, [r3, #12]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800129c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	ea42 0103 	orr.w	r1, r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	021a      	lsls	r2, r3, #8
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	430a      	orrs	r2, r1
 80012b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69d9      	ldr	r1, [r3, #28]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a1a      	ldr	r2, [r3, #32]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
 80012d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2220      	movs	r2, #32
 80012e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	4613      	mov	r3, r2
 800130c:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b20      	cmp	r3, #32
 8001318:	d139      	bne.n	800138e <HAL_I2C_Slave_Transmit_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_I2C_Slave_Transmit_IT+0x28>
 8001324:	2302      	movs	r3, #2
 8001326:	e033      	b.n	8001390 <HAL_I2C_Slave_Transmit_IT+0x90>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2221      	movs	r2, #33	; 0x21
 8001334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2220      	movs	r2, #32
 800133c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	2200      	movs	r2, #0
 8001344:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001354:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	88fa      	ldrh	r2, [r7, #6]
 8001360:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001366:	b29a      	uxth	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_I2C_Slave_Transmit_IT+0x98>)
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	4a09      	ldr	r2, [pc, #36]	; (800139c <HAL_I2C_Slave_Transmit_IT+0x9c>)
 8001376:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8001380:	f248 0101 	movw	r1, #32769	; 0x8001
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f001 f89d 	bl	80024c4 <I2C_Enable_IRQ>

    return HAL_OK;
 800138a:	2300      	movs	r3, #0
 800138c:	e000      	b.n	8001390 <HAL_I2C_Slave_Transmit_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800138e:	2302      	movs	r3, #2
  }
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	ffff0000 	.word	0xffff0000
 800139c:	080015b7 	.word	0x080015b7

080013a0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	4613      	mov	r3, r2
 80013ac:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	d139      	bne.n	800142e <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_I2C_Slave_Receive_IT+0x28>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e033      	b.n	8001430 <HAL_I2C_Slave_Receive_IT+0x90>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2201      	movs	r2, #1
 80013cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2222      	movs	r2, #34	; 0x22
 80013d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2220      	movs	r2, #32
 80013dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013f4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	88fa      	ldrh	r2, [r7, #6]
 8001400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001406:	b29a      	uxth	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <HAL_I2C_Slave_Receive_IT+0x98>)
 8001410:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4a09      	ldr	r2, [pc, #36]	; (800143c <HAL_I2C_Slave_Receive_IT+0x9c>)
 8001416:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001420:	f248 0102 	movw	r1, #32770	; 0x8002
 8001424:	68f8      	ldr	r0, [r7, #12]
 8001426:	f001 f84d 	bl	80024c4 <I2C_Enable_IRQ>

    return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 800142e:	2302      	movs	r3, #2
  }
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	ffff0000 	.word	0xffff0000
 800143c:	080015b7 	.word	0x080015b7

08001440 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800145c:	2b00      	cmp	r3, #0
 800145e:	d005      	beq.n	800146c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	68f9      	ldr	r1, [r7, #12]
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	4798      	blx	r3
  }
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	0a1b      	lsrs	r3, r3, #8
 8001490:	f003 0301 	and.w	r3, r3, #1
 8001494:	2b00      	cmp	r3, #0
 8001496:	d010      	beq.n	80014ba <HAL_I2C_ER_IRQHandler+0x46>
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	09db      	lsrs	r3, r3, #7
 800149c:	f003 0301 	and.w	r3, r3, #1
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00a      	beq.n	80014ba <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	f043 0201 	orr.w	r2, r3, #1
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	0a9b      	lsrs	r3, r3, #10
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d010      	beq.n	80014e8 <HAL_I2C_ER_IRQHandler+0x74>
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	09db      	lsrs	r3, r3, #7
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00a      	beq.n	80014e8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f043 0208 	orr.w	r2, r3, #8
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	0a5b      	lsrs	r3, r3, #9
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d010      	beq.n	8001516 <HAL_I2C_ER_IRQHandler+0xa2>
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	09db      	lsrs	r3, r3, #7
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00a      	beq.n	8001516 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001504:	f043 0202 	orr.w	r2, r3, #2
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001514:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 030b 	and.w	r3, r3, #11
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8001526:	68f9      	ldr	r1, [r7, #12]
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f000 fe63 	bl	80021f4 <I2C_ITError>
  }
}
 800152e:	bf00      	nop
 8001530:	3718      	adds	r7, #24
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}

08001536 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	70fb      	strb	r3, [r7, #3]
 800156a:	4613      	mov	r3, r2
 800156c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	60f8      	str	r0, [r7, #12]
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d101      	bne.n	80015da <I2C_Slave_ISR_IT+0x24>
 80015d6:	2302      	movs	r3, #2
 80015d8:	e0ec      	b.n	80017b4 <I2C_Slave_ISR_IT+0x1fe>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2201      	movs	r2, #1
 80015de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	095b      	lsrs	r3, r3, #5
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <I2C_Slave_ISR_IT+0x4c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	095b      	lsrs	r3, r3, #5
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80015fa:	6939      	ldr	r1, [r7, #16]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 fc99 	bl	8001f34 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	091b      	lsrs	r3, r3, #4
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d04d      	beq.n	80016aa <I2C_Slave_ISR_IT+0xf4>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	2b00      	cmp	r3, #0
 8001618:	d047      	beq.n	80016aa <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161e:	b29b      	uxth	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d128      	bne.n	8001676 <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800162a:	b2db      	uxtb	r3, r3
 800162c:	2b28      	cmp	r3, #40	; 0x28
 800162e:	d108      	bne.n	8001642 <I2C_Slave_ISR_IT+0x8c>
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001636:	d104      	bne.n	8001642 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001638:	6939      	ldr	r1, [r7, #16]
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f000 fd84 	bl	8002148 <I2C_ITListenCplt>
 8001640:	e032      	b.n	80016a8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b29      	cmp	r3, #41	; 0x29
 800164c:	d10e      	bne.n	800166c <I2C_Slave_ISR_IT+0xb6>
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001654:	d00a      	beq.n	800166c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2210      	movs	r2, #16
 800165c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f000 febf 	bl	80023e2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 fb3d 	bl	8001ce4 <I2C_ITSlaveSeqCplt>
 800166a:	e01d      	b.n	80016a8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2210      	movs	r2, #16
 8001672:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001674:	e096      	b.n	80017a4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2210      	movs	r2, #16
 800167c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f043 0204 	orr.w	r2, r3, #4
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d004      	beq.n	800169a <I2C_Slave_ISR_IT+0xe4>
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001696:	f040 8085 	bne.w	80017a4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4619      	mov	r1, r3
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 fda7 	bl	80021f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80016a6:	e07d      	b.n	80017a4 <I2C_Slave_ISR_IT+0x1ee>
 80016a8:	e07c      	b.n	80017a4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d030      	beq.n	8001718 <I2C_Slave_ISR_IT+0x162>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d02a      	beq.n	8001718 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d018      	beq.n	80016fe <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	3b01      	subs	r3, #1
 80016f8:	b29a      	uxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001702:	b29b      	uxth	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d14f      	bne.n	80017a8 <I2C_Slave_ISR_IT+0x1f2>
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800170e:	d04b      	beq.n	80017a8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001710:	68f8      	ldr	r0, [r7, #12]
 8001712:	f000 fae7 	bl	8001ce4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001716:	e047      	b.n	80017a8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	08db      	lsrs	r3, r3, #3
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d00a      	beq.n	800173a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800172c:	2b00      	cmp	r3, #0
 800172e:	d004      	beq.n	800173a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001730:	6939      	ldr	r1, [r7, #16]
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 fa15 	bl	8001b62 <I2C_ITAddrCplt>
 8001738:	e037      	b.n	80017aa <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d031      	beq.n	80017aa <I2C_Slave_ISR_IT+0x1f4>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d02b      	beq.n	80017aa <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001756:	b29b      	uxth	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d018      	beq.n	800178e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
 800178c:	e00d      	b.n	80017aa <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001794:	d002      	beq.n	800179c <I2C_Slave_ISR_IT+0x1e6>
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d106      	bne.n	80017aa <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800179c:	68f8      	ldr	r0, [r7, #12]
 800179e:	f000 faa1 	bl	8001ce4 <I2C_ITSlaveSeqCplt>
 80017a2:	e002      	b.n	80017aa <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80017a4:	bf00      	nop
 80017a6:	e000      	b.n	80017aa <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80017a8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}

080017bc <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af02      	add	r7, sp, #8
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <I2C_Master_ISR_DMA+0x1a>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e0e1      	b.n	800199a <I2C_Master_ISR_DMA+0x1de>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d017      	beq.n	800181a <I2C_Master_ISR_DMA+0x5e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d011      	beq.n	800181a <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2210      	movs	r2, #16
 80017fc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f043 0204 	orr.w	r2, r3, #4
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800180a:	2120      	movs	r1, #32
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f000 fe59 	bl	80024c4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001812:	68f8      	ldr	r0, [r7, #12]
 8001814:	f000 fde5 	bl	80023e2 <I2C_Flush_TXDR>
 8001818:	e0ba      	b.n	8001990 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	09db      	lsrs	r3, r3, #7
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d072      	beq.n	800190c <I2C_Master_ISR_DMA+0x150>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d06c      	beq.n	800190c <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001840:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001846:	b29b      	uxth	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d04e      	beq.n	80018ea <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	b29b      	uxth	r3, r3
 8001854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001858:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185e:	b29b      	uxth	r3, r3
 8001860:	2bff      	cmp	r3, #255	; 0xff
 8001862:	d906      	bls.n	8001872 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	22ff      	movs	r2, #255	; 0xff
 8001868:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800186a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800186e:	617b      	str	r3, [r7, #20]
 8001870:	e010      	b.n	8001894 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001884:	d003      	beq.n	800188e <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	e002      	b.n	8001894 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800188e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001892:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001898:	b2da      	uxtb	r2, r3
 800189a:	8a79      	ldrh	r1, [r7, #18]
 800189c:	2300      	movs	r3, #0
 800189e:	9300      	str	r3, [sp, #0]
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	68f8      	ldr	r0, [r7, #12]
 80018a4:	f000 fde0 	bl	8002468 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b22      	cmp	r3, #34	; 0x22
 80018c4:	d108      	bne.n	80018d8 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018d4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018d6:	e05b      	b.n	8001990 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018e6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80018e8:	e052      	b.n	8001990 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018f8:	d003      	beq.n	8001902 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	f000 f9b5 	bl	8001c6a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001900:	e046      	b.n	8001990 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001902:	2140      	movs	r1, #64	; 0x40
 8001904:	68f8      	ldr	r0, [r7, #12]
 8001906:	f000 fc75 	bl	80021f4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800190a:	e041      	b.n	8001990 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	099b      	lsrs	r3, r3, #6
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d029      	beq.n	800196c <I2C_Master_ISR_DMA+0x1b0>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	099b      	lsrs	r3, r3, #6
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d023      	beq.n	800196c <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001928:	b29b      	uxth	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d119      	bne.n	8001962 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001938:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800193c:	d027      	beq.n	800198e <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001946:	d108      	bne.n	800195a <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001956:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001958:	e019      	b.n	800198e <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 f985 	bl	8001c6a <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001960:	e015      	b.n	800198e <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001962:	2140      	movs	r1, #64	; 0x40
 8001964:	68f8      	ldr	r0, [r7, #12]
 8001966:	f000 fc45 	bl	80021f4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800196a:	e010      	b.n	800198e <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	095b      	lsrs	r3, r3, #5
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00b      	beq.n	8001990 <I2C_Master_ISR_DMA+0x1d4>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	095b      	lsrs	r3, r3, #5
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f000 fa0a 	bl	8001da0 <I2C_ITMasterCplt>
 800198c:	e000      	b.n	8001990 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800198e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3718      	adds	r7, #24
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b088      	sub	sp, #32
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	60f8      	str	r0, [r7, #12]
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <I2C_Slave_ISR_DMA+0x24>
 80019c2:	2302      	movs	r3, #2
 80019c4:	e0c9      	b.n	8001b5a <I2C_Slave_ISR_DMA+0x1b8>
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	095b      	lsrs	r3, r3, #5
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d009      	beq.n	80019ee <I2C_Slave_ISR_DMA+0x4c>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	095b      	lsrs	r3, r3, #5
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 faa3 	bl	8001f34 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	091b      	lsrs	r3, r3, #4
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 809a 	beq.w	8001b30 <I2C_Slave_ISR_DMA+0x18e>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	091b      	lsrs	r3, r3, #4
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8093 	beq.w	8001b30 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	0b9b      	lsrs	r3, r3, #14
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d105      	bne.n	8001a22 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0bdb      	lsrs	r3, r3, #15
 8001a1a:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d07f      	beq.n	8001b22 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00d      	beq.n	8001a46 <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	0bdb      	lsrs	r3, r3, #15
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001a42:	2301      	movs	r3, #1
 8001a44:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00d      	beq.n	8001a6a <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	0b9b      	lsrs	r3, r3, #14
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d007      	beq.n	8001a6a <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001a66:	2301      	movs	r3, #1
 8001a68:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d128      	bne.n	8001ac2 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b28      	cmp	r3, #40	; 0x28
 8001a7a:	d108      	bne.n	8001a8e <I2C_Slave_ISR_DMA+0xec>
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a82:	d104      	bne.n	8001a8e <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001a84:	68b9      	ldr	r1, [r7, #8]
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f000 fb5e 	bl	8002148 <I2C_ITListenCplt>
 8001a8c:	e048      	b.n	8001b20 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b29      	cmp	r3, #41	; 0x29
 8001a98:	d10e      	bne.n	8001ab8 <I2C_Slave_ISR_DMA+0x116>
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001aa0:	d00a      	beq.n	8001ab8 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f000 fc99 	bl	80023e2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 f917 	bl	8001ce4 <I2C_ITSlaveSeqCplt>
 8001ab6:	e033      	b.n	8001b20 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2210      	movs	r2, #16
 8001abe:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001ac0:	e034      	b.n	8001b2c <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2210      	movs	r2, #16
 8001ac8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f043 0204 	orr.w	r2, r3, #4
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001adc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <I2C_Slave_ISR_DMA+0x14a>
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aea:	d11f      	bne.n	8001b2c <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b21      	cmp	r3, #33	; 0x21
 8001af0:	d002      	beq.n	8001af8 <I2C_Slave_ISR_DMA+0x156>
 8001af2:	7dfb      	ldrb	r3, [r7, #23]
 8001af4:	2b29      	cmp	r3, #41	; 0x29
 8001af6:	d103      	bne.n	8001b00 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2221      	movs	r2, #33	; 0x21
 8001afc:	631a      	str	r2, [r3, #48]	; 0x30
 8001afe:	e008      	b.n	8001b12 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001b00:	7dfb      	ldrb	r3, [r7, #23]
 8001b02:	2b22      	cmp	r3, #34	; 0x22
 8001b04:	d002      	beq.n	8001b0c <I2C_Slave_ISR_DMA+0x16a>
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	2b2a      	cmp	r3, #42	; 0x2a
 8001b0a:	d102      	bne.n	8001b12 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2222      	movs	r2, #34	; 0x22
 8001b10:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4619      	mov	r1, r3
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fb6b 	bl	80021f4 <I2C_ITError>
      if (treatdmanack == 1U)
 8001b1e:	e005      	b.n	8001b2c <I2C_Slave_ISR_DMA+0x18a>
 8001b20:	e004      	b.n	8001b2c <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2210      	movs	r2, #16
 8001b28:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b2a:	e011      	b.n	8001b50 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8001b2c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001b2e:	e00f      	b.n	8001b50 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	08db      	lsrs	r3, r3, #3
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <I2C_Slave_ISR_DMA+0x1ae>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	08db      	lsrs	r3, r3, #3
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d003      	beq.n	8001b50 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f809 	bl	8001b62 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b084      	sub	sp, #16
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
 8001b6a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001b78:	2b28      	cmp	r3, #40	; 0x28
 8001b7a:	d16a      	bne.n	8001c52 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	0c1b      	lsrs	r3, r3, #16
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	f003 0301 	and.w	r3, r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	0c1b      	lsrs	r3, r3, #16
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001b9a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ba8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001bb6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d138      	bne.n	8001c32 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001bc0:	897b      	ldrh	r3, [r7, #10]
 8001bc2:	09db      	lsrs	r3, r3, #7
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	89bb      	ldrh	r3, [r7, #12]
 8001bc8:	4053      	eors	r3, r2
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	f003 0306 	and.w	r3, r3, #6
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d11c      	bne.n	8001c0e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001bd4:	897b      	ldrh	r3, [r7, #10]
 8001bd6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bdc:	1c5a      	adds	r2, r3, #1
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d13b      	bne.n	8001c62 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c00:	89ba      	ldrh	r2, [r7, #12]
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	4619      	mov	r1, r3
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fca9 	bl	800155e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8001c0c:	e029      	b.n	8001c62 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8001c0e:	893b      	ldrh	r3, [r7, #8]
 8001c10:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f000 fcb8 	bl	800258c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c24:	89ba      	ldrh	r2, [r7, #12]
 8001c26:	7bfb      	ldrb	r3, [r7, #15]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fc97 	bl	800155e <HAL_I2C_AddrCallback>
}
 8001c30:	e017      	b.n	8001c62 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001c32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f000 fca8 	bl	800258c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001c44:	89ba      	ldrh	r2, [r7, #12]
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fc87 	bl	800155e <HAL_I2C_AddrCallback>
}
 8001c50:	e007      	b.n	8001c62 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2208      	movs	r2, #8
 8001c58:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b082      	sub	sp, #8
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b21      	cmp	r3, #33	; 0x21
 8001c84:	d115      	bne.n	8001cb2 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2220      	movs	r2, #32
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2211      	movs	r2, #17
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f000 fc75 	bl	800258c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fc43 	bl	8001536 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001cb0:	e014      	b.n	8001cdc <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2212      	movs	r2, #18
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001cc6:	2102      	movs	r1, #2
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f000 fc5f 	bl	800258c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fc37 	bl	800154a <HAL_I2C_MasterRxCpltCallback>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	0b9b      	lsrs	r3, r3, #14
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d008      	beq.n	8001d1a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	e00d      	b.n	8001d36 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	0bdb      	lsrs	r3, r3, #15
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d007      	beq.n	8001d36 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d34:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b29      	cmp	r3, #41	; 0x29
 8001d40:	d112      	bne.n	8001d68 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2228      	movs	r2, #40	; 0x28
 8001d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2221      	movs	r2, #33	; 0x21
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001d50:	2101      	movs	r1, #1
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fc1a 	bl	800258c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	f7fe fbb3 	bl	80004cc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001d66:	e017      	b.n	8001d98 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b2a      	cmp	r3, #42	; 0x2a
 8001d72:	d111      	bne.n	8001d98 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2228      	movs	r2, #40	; 0x28
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2222      	movs	r2, #34	; 0x22
 8001d80:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001d82:	2102      	movs	r1, #2
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 fc01 	bl	800258c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7fe fbaa 	bl	80004ec <HAL_I2C_SlaveRxCpltCallback>
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b086      	sub	sp, #24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2220      	movs	r2, #32
 8001db4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b21      	cmp	r3, #33	; 0x21
 8001dc0:	d107      	bne.n	8001dd2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 fbe1 	bl	800258c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2211      	movs	r2, #17
 8001dce:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd0:	e00c      	b.n	8001dec <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b22      	cmp	r3, #34	; 0x22
 8001ddc:	d106      	bne.n	8001dec <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001dde:	2102      	movs	r1, #2
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fbd3 	bl	800258c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2212      	movs	r2, #18
 8001dea:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6859      	ldr	r1, [r3, #4]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	4b4d      	ldr	r3, [pc, #308]	; (8001f2c <I2C_ITMasterCplt+0x18c>)
 8001df8:	400b      	ands	r3, r1
 8001dfa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4a      	ldr	r2, [pc, #296]	; (8001f30 <I2C_ITMasterCplt+0x190>)
 8001e06:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d009      	beq.n	8001e28 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	f043 0204 	orr.w	r2, r3, #4
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b60      	cmp	r3, #96	; 0x60
 8001e32:	d10b      	bne.n	8001e4c <I2C_ITMasterCplt+0xac>
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	f003 0301 	and.w	r3, r3, #1
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 fac8 	bl	80023e2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b60      	cmp	r3, #96	; 0x60
 8001e62:	d002      	beq.n	8001e6a <I2C_ITMasterCplt+0xca>
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f9bf 	bl	80021f4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8001e76:	e054      	b.n	8001f22 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b21      	cmp	r3, #33	; 0x21
 8001e82:	d124      	bne.n	8001ece <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d10b      	bne.n	8001eb6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fb6d 	bl	800158e <HAL_I2C_MemTxCpltCallback>
}
 8001eb4:	e035      	b.n	8001f22 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fb35 	bl	8001536 <HAL_I2C_MasterTxCpltCallback>
}
 8001ecc:	e029      	b.n	8001f22 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b22      	cmp	r3, #34	; 0x22
 8001ed8:	d123      	bne.n	8001f22 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2220      	movs	r2, #32
 8001ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b40      	cmp	r3, #64	; 0x40
 8001ef2:	d10b      	bne.n	8001f0c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fb4c 	bl	80015a2 <HAL_I2C_MemRxCpltCallback>
}
 8001f0a:	e00a      	b.n	8001f22 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff fb14 	bl	800154a <HAL_I2C_MasterRxCpltCallback>
}
 8001f22:	bf00      	nop
 8001f24:	3718      	adds	r7, #24
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	fe00e800 	.word	0xfe00e800
 8001f30:	ffff0000 	.word	0xffff0000

08001f34 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f50:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2220      	movs	r2, #32
 8001f58:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
 8001f5c:	2b21      	cmp	r3, #33	; 0x21
 8001f5e:	d002      	beq.n	8001f66 <I2C_ITSlaveCplt+0x32>
 8001f60:	7bfb      	ldrb	r3, [r7, #15]
 8001f62:	2b29      	cmp	r3, #41	; 0x29
 8001f64:	d108      	bne.n	8001f78 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001f66:	f248 0101 	movw	r1, #32769	; 0x8001
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fb0e 	bl	800258c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2221      	movs	r2, #33	; 0x21
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
 8001f76:	e00d      	b.n	8001f94 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f78:	7bfb      	ldrb	r3, [r7, #15]
 8001f7a:	2b22      	cmp	r3, #34	; 0x22
 8001f7c:	d002      	beq.n	8001f84 <I2C_ITSlaveCplt+0x50>
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	2b2a      	cmp	r3, #42	; 0x2a
 8001f82:	d107      	bne.n	8001f94 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001f84:	f248 0102 	movw	r1, #32770	; 0x8002
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f000 faff 	bl	800258c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2222      	movs	r2, #34	; 0x22
 8001f92:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fa2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6859      	ldr	r1, [r3, #4]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	4b64      	ldr	r3, [pc, #400]	; (8002140 <I2C_ITSlaveCplt+0x20c>)
 8001fb0:	400b      	ands	r3, r1
 8001fb2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fa14 	bl	80023e2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	0b9b      	lsrs	r3, r3, #14
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d013      	beq.n	8001fee <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fd4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d020      	beq.n	8002020 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fec:	e018      	b.n	8002020 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	0bdb      	lsrs	r3, r3, #15
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d012      	beq.n	8002020 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002008:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200e:	2b00      	cmp	r3, #0
 8002010:	d006      	beq.n	8002020 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	b29a      	uxth	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d020      	beq.n	800206e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f023 0304 	bic.w	r3, r3, #4
 8002032:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00c      	beq.n	800206e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002058:	3b01      	subs	r3, #1
 800205a:	b29a      	uxth	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	3b01      	subs	r3, #1
 8002068:	b29a      	uxth	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207c:	f043 0204 	orr.w	r2, r3, #4
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	2b00      	cmp	r3, #0
 8002098:	d010      	beq.n	80020bc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f8a7 	bl	80021f4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b28      	cmp	r3, #40	; 0x28
 80020b0:	d141      	bne.n	8002136 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80020b2:	6979      	ldr	r1, [r7, #20]
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f847 	bl	8002148 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80020ba:	e03c      	b.n	8002136 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020c4:	d014      	beq.n	80020f0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff fe0c 	bl	8001ce4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a1d      	ldr	r2, [pc, #116]	; (8002144 <I2C_ITSlaveCplt+0x210>)
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fa46 	bl	800157a <HAL_I2C_ListenCpltCallback>
}
 80020ee:	e022      	b.n	8002136 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b22      	cmp	r3, #34	; 0x22
 80020fa:	d10e      	bne.n	800211a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2220      	movs	r2, #32
 8002100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe f9ea 	bl	80004ec <HAL_I2C_SlaveRxCpltCallback>
}
 8002118:	e00d      	b.n	8002136 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7fe f9cb 	bl	80004cc <HAL_I2C_SlaveTxCpltCallback>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	fe00e800 	.word	0xfe00e800
 8002144:	ffff0000 	.word	0xffff0000

08002148 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a26      	ldr	r2, [pc, #152]	; (80021f0 <I2C_ITListenCplt+0xa8>)
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	089b      	lsrs	r3, r3, #2
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d022      	beq.n	80021c6 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800219c:	2b00      	cmp	r3, #0
 800219e:	d012      	beq.n	80021c6 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021a4:	3b01      	subs	r3, #1
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f043 0204 	orr.w	r2, r3, #4
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80021c6:	f248 0103 	movw	r1, #32771	; 0x8003
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f9de 	bl	800258c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2210      	movs	r2, #16
 80021d6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff f9ca 	bl	800157a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	ffff0000 	.word	0xffff0000

080021f4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a5d      	ldr	r2, [pc, #372]	; (8002388 <I2C_ITError+0x194>)
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2b28      	cmp	r3, #40	; 0x28
 800222a:	d005      	beq.n	8002238 <I2C_ITError+0x44>
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b29      	cmp	r3, #41	; 0x29
 8002230:	d002      	beq.n	8002238 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	2b2a      	cmp	r3, #42	; 0x2a
 8002236:	d10b      	bne.n	8002250 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002238:	2103      	movs	r1, #3
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f9a6 	bl	800258c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2228      	movs	r2, #40	; 0x28
 8002244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a50      	ldr	r2, [pc, #320]	; (800238c <I2C_ITError+0x198>)
 800224c:	635a      	str	r2, [r3, #52]	; 0x34
 800224e:	e011      	b.n	8002274 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002250:	f248 0103 	movw	r1, #32771	; 0x8003
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f999 	bl	800258c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b60      	cmp	r3, #96	; 0x60
 8002264:	d003      	beq.n	800226e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2220      	movs	r2, #32
 800226a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800227e:	2b00      	cmp	r3, #0
 8002280:	d039      	beq.n	80022f6 <I2C_ITError+0x102>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	2b11      	cmp	r3, #17
 8002286:	d002      	beq.n	800228e <I2C_ITError+0x9a>
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b21      	cmp	r3, #33	; 0x21
 800228c:	d133      	bne.n	80022f6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800229c:	d107      	bne.n	80022ae <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022ac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b2:	4618      	mov	r0, r3
 80022b4:	f7fe fdfc 	bl	8000eb0 <HAL_DMA_GetState>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d017      	beq.n	80022ee <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c2:	4a33      	ldr	r2, [pc, #204]	; (8002390 <I2C_ITError+0x19c>)
 80022c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fdab 	bl	8000e2e <HAL_DMA_Abort_IT>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d04d      	beq.n	800237a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022e8:	4610      	mov	r0, r2
 80022ea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022ec:	e045      	b.n	800237a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f850 	bl	8002394 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80022f4:	e041      	b.n	800237a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d039      	beq.n	8002372 <I2C_ITError+0x17e>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b12      	cmp	r3, #18
 8002302:	d002      	beq.n	800230a <I2C_ITError+0x116>
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b22      	cmp	r3, #34	; 0x22
 8002308:	d133      	bne.n	8002372 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002314:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002318:	d107      	bne.n	800232a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002328:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fdbe 	bl	8000eb0 <HAL_DMA_GetState>
 8002334:	4603      	mov	r3, r0
 8002336:	2b01      	cmp	r3, #1
 8002338:	d017      	beq.n	800236a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	4a14      	ldr	r2, [pc, #80]	; (8002390 <I2C_ITError+0x19c>)
 8002340:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fd6d 	bl	8000e2e <HAL_DMA_Abort_IT>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d011      	beq.n	800237e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002364:	4610      	mov	r0, r2
 8002366:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002368:	e009      	b.n	800237e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f000 f812 	bl	8002394 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002370:	e005      	b.n	800237e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f80e 	bl	8002394 <I2C_TreatErrorCallback>
  }
}
 8002378:	e002      	b.n	8002380 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800237a:	bf00      	nop
 800237c:	e000      	b.n	8002380 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800237e:	bf00      	nop
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	ffff0000 	.word	0xffff0000
 800238c:	080015b7 	.word	0x080015b7
 8002390:	0800242b 	.word	0x0800242b

08002394 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b60      	cmp	r3, #96	; 0x60
 80023a6:	d10e      	bne.n	80023c6 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2220      	movs	r2, #32
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe f8b4 	bl	800052c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80023c4:	e009      	b.n	80023da <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7fe f899 	bl	800050c <HAL_I2C_ErrorCallback>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d103      	bne.n	8002400 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2200      	movs	r2, #0
 80023fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	f003 0301 	and.w	r3, r3, #1
 800240a:	2b01      	cmp	r3, #1
 800240c:	d007      	beq.n	800241e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0201 	orr.w	r2, r2, #1
 800241c:	619a      	str	r2, [r3, #24]
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	2200      	movs	r2, #0
 8002446:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244c:	2b00      	cmp	r3, #0
 800244e:	d003      	beq.n	8002458 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	2200      	movs	r2, #0
 8002456:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f7ff ff9b 	bl	8002394 <I2C_TreatErrorCallback>
}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
	...

08002468 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	817b      	strh	r3, [r7, #10]
 8002476:	4613      	mov	r3, r2
 8002478:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	0d5b      	lsrs	r3, r3, #21
 8002484:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002488:	4b0d      	ldr	r3, [pc, #52]	; (80024c0 <I2C_TransferConfig+0x58>)
 800248a:	430b      	orrs	r3, r1
 800248c:	43db      	mvns	r3, r3
 800248e:	ea02 0103 	and.w	r1, r2, r3
 8002492:	897b      	ldrh	r3, [r7, #10]
 8002494:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002498:	7a7b      	ldrb	r3, [r7, #9]
 800249a:	041b      	lsls	r3, r3, #16
 800249c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	03ff63ff 	.word	0x03ff63ff

080024c4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80024d0:	2300      	movs	r3, #0
 80024d2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d8:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <I2C_Enable_IRQ+0xc0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d004      	beq.n	80024e8 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80024e2:	4a29      	ldr	r2, [pc, #164]	; (8002588 <I2C_Enable_IRQ+0xc4>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d11d      	bne.n	8002524 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80024e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da03      	bge.n	80024f8 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80024f6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d103      	bne.n	8002506 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002504:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002506:	887b      	ldrh	r3, [r7, #2]
 8002508:	2b20      	cmp	r3, #32
 800250a:	d103      	bne.n	8002514 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002512:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002514:	887b      	ldrh	r3, [r7, #2]
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d125      	bne.n	8002566 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002520:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002522:	e020      	b.n	8002566 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002524:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002528:	2b00      	cmp	r3, #0
 800252a:	da03      	bge.n	8002534 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002532:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002544:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002546:	887b      	ldrh	r3, [r7, #2]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002556:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002558:	887b      	ldrh	r3, [r7, #2]
 800255a:	2b20      	cmp	r3, #32
 800255c:	d103      	bne.n	8002566 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f043 0320 	orr.w	r3, r3, #32
 8002564:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	6819      	ldr	r1, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	080017bd 	.word	0x080017bd
 8002588:	080019a3 	.word	0x080019a3

0800258c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00f      	beq.n	80025c6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80025ac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025ba:	2b28      	cmp	r3, #40	; 0x28
 80025bc:	d003      	beq.n	80025c6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80025c4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80025c6:	887b      	ldrh	r3, [r7, #2]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00f      	beq.n	80025f0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80025d6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80025e4:	2b28      	cmp	r3, #40	; 0x28
 80025e6:	d003      	beq.n	80025f0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80025ee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80025f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da03      	bge.n	8002600 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80025fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	2b10      	cmp	r3, #16
 8002604:	d103      	bne.n	800260e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800260c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	2b20      	cmp	r3, #32
 8002612:	d103      	bne.n	800261c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	f043 0320 	orr.w	r3, r3, #32
 800261a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	2b40      	cmp	r3, #64	; 0x40
 8002620:	d103      	bne.n	800262a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002628:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6819      	ldr	r1, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	43da      	mvns	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	400a      	ands	r2, r1
 800263a:	601a      	str	r2, [r3, #0]
}
 800263c:	bf00      	nop
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b20      	cmp	r3, #32
 800265c:	d138      	bne.n	80026d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002668:	2302      	movs	r3, #2
 800266a:	e032      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800269a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6819      	ldr	r1, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026cc:	2300      	movs	r3, #0
 80026ce:	e000      	b.n	80026d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026d0:	2302      	movs	r3, #2
  }
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b20      	cmp	r3, #32
 80026f2:	d139      	bne.n	8002768 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026fe:	2302      	movs	r3, #2
 8002700:	e033      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2224      	movs	r2, #36	; 0x24
 800270e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0201 	bic.w	r2, r2, #1
 8002720:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002730:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f042 0201 	orr.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002764:	2300      	movs	r3, #0
 8002766:	e000      	b.n	800276a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002768:	2302      	movs	r3, #2
  }
}
 800276a:	4618      	mov	r0, r3
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800277c:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a04      	ldr	r2, [pc, #16]	; (8002794 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002786:	6013      	str	r3, [r2, #0]
}
 8002788:	bf00      	nop
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40007000 	.word	0x40007000

08002798 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40007000 	.word	0x40007000

080027b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c2:	d130      	bne.n	8002826 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027c4:	4b23      	ldr	r3, [pc, #140]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027d0:	d038      	beq.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027d2:	4b20      	ldr	r3, [pc, #128]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027da:	4a1e      	ldr	r2, [pc, #120]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027e0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2232      	movs	r2, #50	; 0x32
 80027e8:	fb02 f303 	mul.w	r3, r2, r3
 80027ec:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80027ee:	fba2 2303 	umull	r2, r3, r2, r3
 80027f2:	0c9b      	lsrs	r3, r3, #18
 80027f4:	3301      	adds	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027f8:	e002      	b.n	8002800 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002800:	4b14      	ldr	r3, [pc, #80]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280c:	d102      	bne.n	8002814 <HAL_PWREx_ControlVoltageScaling+0x60>
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1f2      	bne.n	80027fa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002814:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002816:	695b      	ldr	r3, [r3, #20]
 8002818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800281c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002820:	d110      	bne.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e00f      	b.n	8002846 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002826:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800282e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002832:	d007      	beq.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800283c:	4a05      	ldr	r2, [pc, #20]	; (8002854 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002842:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40007000 	.word	0x40007000
 8002858:	20000004 	.word	0x20000004
 800285c:	431bde83 	.word	0x431bde83

08002860 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b08a      	sub	sp, #40	; 0x28
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d102      	bne.n	8002874 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	f000 bc56 	b.w	8003120 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002874:	4ba1      	ldr	r3, [pc, #644]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
 800287c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800287e:	4b9f      	ldr	r3, [pc, #636]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0310 	and.w	r3, r3, #16
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80e6 	beq.w	8002a62 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002896:	6a3b      	ldr	r3, [r7, #32]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d007      	beq.n	80028ac <HAL_RCC_OscConfig+0x4c>
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	f040 808d 	bne.w	80029be <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	f040 8089 	bne.w	80029be <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028ac:	4b93      	ldr	r3, [pc, #588]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d006      	beq.n	80028c6 <HAL_RCC_OscConfig+0x66>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d102      	bne.n	80028c6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	f000 bc2d 	b.w	8003120 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028ca:	4b8c      	ldr	r3, [pc, #560]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <HAL_RCC_OscConfig+0x80>
 80028d6:	4b89      	ldr	r3, [pc, #548]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028de:	e005      	b.n	80028ec <HAL_RCC_OscConfig+0x8c>
 80028e0:	4b86      	ldr	r3, [pc, #536]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 80028e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d224      	bcs.n	800293a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	4618      	mov	r0, r3
 80028f6:	f000 fdbd 	bl	8003474 <RCC_SetFlashLatencyFromMSIRange>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d002      	beq.n	8002906 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	f000 bc0d 	b.w	8003120 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002906:	4b7d      	ldr	r3, [pc, #500]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a7c      	ldr	r2, [pc, #496]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	6013      	str	r3, [r2, #0]
 8002912:	4b7a      	ldr	r3, [pc, #488]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	4977      	ldr	r1, [pc, #476]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002920:	4313      	orrs	r3, r2
 8002922:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002924:	4b75      	ldr	r3, [pc, #468]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	4972      	ldr	r1, [pc, #456]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
 8002938:	e025      	b.n	8002986 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800293a:	4b70      	ldr	r3, [pc, #448]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a6f      	ldr	r2, [pc, #444]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	4b6d      	ldr	r3, [pc, #436]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002952:	496a      	ldr	r1, [pc, #424]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002954:	4313      	orrs	r3, r2
 8002956:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	021b      	lsls	r3, r3, #8
 8002966:	4965      	ldr	r1, [pc, #404]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002968:	4313      	orrs	r3, r2
 800296a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d109      	bne.n	8002986 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002976:	4618      	mov	r0, r3
 8002978:	f000 fd7c 	bl	8003474 <RCC_SetFlashLatencyFromMSIRange>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e3cc      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002986:	f000 fcb3 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 800298a:	4601      	mov	r1, r0
 800298c:	4b5b      	ldr	r3, [pc, #364]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	4a5a      	ldr	r2, [pc, #360]	; (8002b00 <HAL_RCC_OscConfig+0x2a0>)
 8002998:	5cd3      	ldrb	r3, [r2, r3]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	fa21 f303 	lsr.w	r3, r1, r3
 80029a2:	4a58      	ldr	r2, [pc, #352]	; (8002b04 <HAL_RCC_OscConfig+0x2a4>)
 80029a4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029a6:	4b58      	ldr	r3, [pc, #352]	; (8002b08 <HAL_RCC_OscConfig+0x2a8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f8d2 	bl	8000b54 <HAL_InitTick>
 80029b0:	4603      	mov	r3, r0
 80029b2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80029b4:	7dfb      	ldrb	r3, [r7, #23]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d052      	beq.n	8002a60 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
 80029bc:	e3b0      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d032      	beq.n	8002a2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029c6:	4b4d      	ldr	r3, [pc, #308]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a4c      	ldr	r2, [pc, #304]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029d2:	f7fe f90f 	bl	8000bf4 <HAL_GetTick>
 80029d6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029da:	f7fe f90b 	bl	8000bf4 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e399      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029ec:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0f0      	beq.n	80029da <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f8:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a3f      	ldr	r2, [pc, #252]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 80029fe:	f043 0308 	orr.w	r3, r3, #8
 8002a02:	6013      	str	r3, [r2, #0]
 8002a04:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a10:	493a      	ldr	r1, [pc, #232]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	021b      	lsls	r3, r3, #8
 8002a24:	4935      	ldr	r1, [pc, #212]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
 8002a2a:	e01a      	b.n	8002a62 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a2c:	4b33      	ldr	r3, [pc, #204]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a32      	ldr	r2, [pc, #200]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a38:	f7fe f8dc 	bl	8000bf4 <HAL_GetTick>
 8002a3c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a40:	f7fe f8d8 	bl	8000bf4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e366      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a52:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1e0>
 8002a5e:	e000      	b.n	8002a62 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d073      	beq.n	8002b56 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_OscConfig+0x220>
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d10e      	bne.n	8002a98 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d10b      	bne.n	8002a98 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	4b1e      	ldr	r3, [pc, #120]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d063      	beq.n	8002b54 <HAL_RCC_OscConfig+0x2f4>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d15f      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e343      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aa0:	d106      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x250>
 8002aa2:	4b16      	ldr	r3, [pc, #88]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a15      	ldr	r2, [pc, #84]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	e01d      	b.n	8002aec <HAL_RCC_OscConfig+0x28c>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x274>
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a0f      	ldr	r2, [pc, #60]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a0c      	ldr	r2, [pc, #48]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002acc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_OscConfig+0x28c>
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a08      	ldr	r2, [pc, #32]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002ada:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a05      	ldr	r2, [pc, #20]	; (8002afc <HAL_RCC_OscConfig+0x29c>)
 8002ae6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d01b      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002af4:	f7fe f87e 	bl	8000bf4 <HAL_GetTick>
 8002af8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002afa:	e010      	b.n	8002b1e <HAL_RCC_OscConfig+0x2be>
 8002afc:	40021000 	.word	0x40021000
 8002b00:	0800409c 	.word	0x0800409c
 8002b04:	20000004 	.word	0x20000004
 8002b08:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b0c:	f7fe f872 	bl	8000bf4 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b64      	cmp	r3, #100	; 0x64
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e300      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b1e:	4ba0      	ldr	r3, [pc, #640]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d0f0      	beq.n	8002b0c <HAL_RCC_OscConfig+0x2ac>
 8002b2a:	e014      	b.n	8002b56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe f862 	bl	8000bf4 <HAL_GetTick>
 8002b30:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe f85e 	bl	8000bf4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e2ec      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b46:	4b96      	ldr	r3, [pc, #600]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f0      	bne.n	8002b34 <HAL_RCC_OscConfig+0x2d4>
 8002b52:	e000      	b.n	8002b56 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d060      	beq.n	8002c24 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b62:	6a3b      	ldr	r3, [r7, #32]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d005      	beq.n	8002b74 <HAL_RCC_OscConfig+0x314>
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d119      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d116      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b74:	4b8a      	ldr	r3, [pc, #552]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_RCC_OscConfig+0x32c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e2c9      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b8c:	4b84      	ldr	r3, [pc, #528]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	061b      	lsls	r3, r3, #24
 8002b9a:	4981      	ldr	r1, [pc, #516]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	e040      	b.n	8002c24 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d023      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002baa:	4b7d      	ldr	r3, [pc, #500]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a7c      	ldr	r2, [pc, #496]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe f81d 	bl	8000bf4 <HAL_GetTick>
 8002bba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe f819 	bl	8000bf4 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e2a7      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bd0:	4b73      	ldr	r3, [pc, #460]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bdc:	4b70      	ldr	r3, [pc, #448]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	496d      	ldr	r1, [pc, #436]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]
 8002bf0:	e018      	b.n	8002c24 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bf2:	4b6b      	ldr	r3, [pc, #428]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a6a      	ldr	r2, [pc, #424]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002bf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfe:	f7fd fff9 	bl	8000bf4 <HAL_GetTick>
 8002c02:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c04:	e008      	b.n	8002c18 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c06:	f7fd fff5 	bl	8000bf4 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d901      	bls.n	8002c18 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002c14:	2303      	movs	r3, #3
 8002c16:	e283      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c18:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1f0      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d07f      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d05f      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002c38:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c3e:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	f003 0310 	and.w	r3, r3, #16
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d037      	beq.n	8002cbe <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d006      	beq.n	8002c66 <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e25c      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d01b      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002c70:	4b4b      	ldr	r3, [pc, #300]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c76:	4a4a      	ldr	r2, [pc, #296]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c80:	f7fd ffb8 	bl	8000bf4 <HAL_GetTick>
 8002c84:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c88:	f7fd ffb4 	bl	8000bf4 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b11      	cmp	r3, #17
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e242      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c9a:	4b41      	ldr	r3, [pc, #260]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1ef      	bne.n	8002c88 <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8002ca8:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cae:	f023 0210 	bic.w	r2, r3, #16
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	493a      	ldr	r1, [pc, #232]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cbe:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cc4:	4a36      	ldr	r2, [pc, #216]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002cc6:	f043 0301 	orr.w	r3, r3, #1
 8002cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7fd ff91 	bl	8000bf4 <HAL_GetTick>
 8002cd2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd6:	f7fd ff8d 	bl	8000bf4 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b11      	cmp	r3, #17
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e21b      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ce8:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0ef      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x476>
 8002cf6:	e01b      	b.n	8002d30 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf8:	4b29      	ldr	r3, [pc, #164]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cfe:	4a28      	ldr	r2, [pc, #160]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d08:	f7fd ff74 	bl	8000bf4 <HAL_GetTick>
 8002d0c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d10:	f7fd ff70 	bl	8000bf4 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b11      	cmp	r3, #17
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e1fe      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1ef      	bne.n	8002d10 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80c1 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d44:	4b16      	ldr	r3, [pc, #88]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d10e      	bne.n	8002d6e <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d50:	4b13      	ldr	r3, [pc, #76]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d5c:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x540>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	60fb      	str	r3, [r7, #12]
 8002d66:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_OscConfig+0x544>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d7a:	4b0a      	ldr	r3, [pc, #40]	; (8002da4 <HAL_RCC_OscConfig+0x544>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_RCC_OscConfig+0x544>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fd ff35 	bl	8000bf4 <HAL_GetTick>
 8002d8a:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d8c:	e00c      	b.n	8002da8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7fd ff31 	bl	8000bf4 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d905      	bls.n	8002da8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e1bf      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002da8:	4bb1      	ldr	r3, [pc, #708]	; (8003070 <HAL_RCC_OscConfig+0x810>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0ec      	beq.n	8002d8e <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d02c      	beq.n	8002e1a <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8002dc0:	4bac      	ldr	r3, [pc, #688]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	49a8      	ldr	r1, [pc, #672]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0304 	and.w	r3, r3, #4
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d010      	beq.n	8002e08 <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002de6:	4ba3      	ldr	r3, [pc, #652]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	4aa1      	ldr	r2, [pc, #644]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002dee:	f043 0304 	orr.w	r3, r3, #4
 8002df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002df6:	4b9f      	ldr	r3, [pc, #636]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dfc:	4a9d      	ldr	r2, [pc, #628]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002dfe:	f043 0301 	orr.w	r3, r3, #1
 8002e02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e06:	e018      	b.n	8002e3a <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e08:	4b9a      	ldr	r3, [pc, #616]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	4a99      	ldr	r2, [pc, #612]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e18:	e00f      	b.n	8002e3a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002e1a:	4b96      	ldr	r3, [pc, #600]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	4a94      	ldr	r2, [pc, #592]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002e2a:	4b92      	ldr	r3, [pc, #584]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	4a90      	ldr	r2, [pc, #576]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002e32:	f023 0304 	bic.w	r3, r3, #4
 8002e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d016      	beq.n	8002e70 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e42:	f7fd fed7 	bl	8000bf4 <HAL_GetTick>
 8002e46:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fd fed3 	bl	8000bf4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e15f      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e60:	4b84      	ldr	r3, [pc, #528]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0ed      	beq.n	8002e4a <HAL_RCC_OscConfig+0x5ea>
 8002e6e:	e01d      	b.n	8002eac <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fd fec0 	bl	8000bf4 <HAL_GetTick>
 8002e74:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f7fd febc 	bl	8000bf4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e148      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e8e:	4b79      	ldr	r3, [pc, #484]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d1ed      	bne.n	8002e78 <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002e9c:	4b75      	ldr	r3, [pc, #468]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea2:	4a74      	ldr	r2, [pc, #464]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb4:	4b6f      	ldr	r3, [pc, #444]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb8:	4a6e      	ldr	r2, [pc, #440]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d03c      	beq.n	8002f46 <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d01c      	beq.n	8002f0e <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ed4:	4b67      	ldr	r3, [pc, #412]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002eda:	4a66      	ldr	r2, [pc, #408]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee4:	f7fd fe86 	bl	8000bf4 <HAL_GetTick>
 8002ee8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002eec:	f7fd fe82 	bl	8000bf4 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e110      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002efe:	4b5d      	ldr	r3, [pc, #372]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002f00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ef      	beq.n	8002eec <HAL_RCC_OscConfig+0x68c>
 8002f0c:	e01b      	b.n	8002f46 <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f0e:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002f10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f14:	4a57      	ldr	r2, [pc, #348]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002f16:	f023 0301 	bic.w	r3, r3, #1
 8002f1a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f1e:	f7fd fe69 	bl	8000bf4 <HAL_GetTick>
 8002f22:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f26:	f7fd fe65 	bl	8000bf4 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0f3      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f38:	4b4e      	ldr	r3, [pc, #312]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002f3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1ef      	bne.n	8002f26 <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 80e7 	beq.w	800311e <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	f040 80b7 	bne.w	80030c8 <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f5a:	4b46      	ldr	r3, [pc, #280]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0203 	and.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d124      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d11b      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d113      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	085b      	lsrs	r3, r3, #1
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d109      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	085b      	lsrs	r3, r3, #1
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d061      	beq.n	800307c <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fb8:	6a3b      	ldr	r3, [r7, #32]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d056      	beq.n	800306c <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002fbe:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2c      	ldr	r2, [pc, #176]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002fc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fca:	f7fd fe13 	bl	8000bf4 <HAL_GetTick>
 8002fce:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd2:	f7fd fe0f 	bl	8000bf4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e09d      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe4:	4b23      	ldr	r3, [pc, #140]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1f0      	bne.n	8002fd2 <HAL_RCC_OscConfig+0x772>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_RCC_OscConfig+0x818>)
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003000:	3a01      	subs	r2, #1
 8003002:	0112      	lsls	r2, r2, #4
 8003004:	4311      	orrs	r1, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800300a:	0212      	lsls	r2, r2, #8
 800300c:	4311      	orrs	r1, r2
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003012:	0852      	lsrs	r2, r2, #1
 8003014:	3a01      	subs	r2, #1
 8003016:	0552      	lsls	r2, r2, #21
 8003018:	4311      	orrs	r1, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800301e:	0852      	lsrs	r2, r2, #1
 8003020:	3a01      	subs	r2, #1
 8003022:	0652      	lsls	r2, r2, #25
 8003024:	430a      	orrs	r2, r1
 8003026:	4913      	ldr	r1, [pc, #76]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8003028:	4313      	orrs	r3, r2
 800302a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800302c:	4b11      	ldr	r3, [pc, #68]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a10      	ldr	r2, [pc, #64]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8003032:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003036:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003038:	4b0e      	ldr	r3, [pc, #56]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4a0d      	ldr	r2, [pc, #52]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 800303e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003042:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003044:	f7fd fdd6 	bl	8000bf4 <HAL_GetTick>
 8003048:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fd fdd2 	bl	8000bf4 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e060      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800305e:	4b05      	ldr	r3, [pc, #20]	; (8003074 <HAL_RCC_OscConfig+0x814>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800306a:	e058      	b.n	800311e <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e057      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
 8003070:	40007000 	.word	0x40007000
 8003074:	40021000 	.word	0x40021000
 8003078:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d14a      	bne.n	800311e <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003088:	4b27      	ldr	r3, [pc, #156]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a26      	ldr	r2, [pc, #152]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 800308e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003094:	4b24      	ldr	r3, [pc, #144]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	4a23      	ldr	r2, [pc, #140]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 800309a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030a0:	f7fd fda8 	bl	8000bf4 <HAL_GetTick>
 80030a4:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a6:	e008      	b.n	80030ba <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a8:	f7fd fda4 	bl	8000bf4 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d901      	bls.n	80030ba <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 80030b6:	2303      	movs	r3, #3
 80030b8:	e032      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d0f0      	beq.n	80030a8 <HAL_RCC_OscConfig+0x848>
 80030c6:	e02a      	b.n	800311e <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c8:	6a3b      	ldr	r3, [r7, #32]
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d025      	beq.n	800311a <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a15      	ldr	r2, [pc, #84]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 80030d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030d8:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80030da:	4b13      	ldr	r3, [pc, #76]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	4a12      	ldr	r2, [pc, #72]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 80030e0:	f023 0303 	bic.w	r3, r3, #3
 80030e4:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80030e6:	4b10      	ldr	r3, [pc, #64]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	4a0f      	ldr	r2, [pc, #60]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 80030ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80030f0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f2:	f7fd fd7f 	bl	8000bf4 <HAL_GetTick>
 80030f6:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fa:	f7fd fd7b 	bl	8000bf4 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e009      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800310c:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_OscConfig+0x8c8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d1f0      	bne.n	80030fa <HAL_RCC_OscConfig+0x89a>
 8003118:	e001      	b.n	800311e <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3728      	adds	r7, #40	; 0x28
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000

0800312c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0c8      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b66      	ldr	r3, [pc, #408]	; (80032dc <HAL_RCC_ClockConfig+0x1b0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d910      	bls.n	8003170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b63      	ldr	r3, [pc, #396]	; (80032dc <HAL_RCC_ClockConfig+0x1b0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 0207 	bic.w	r2, r3, #7
 8003156:	4961      	ldr	r1, [pc, #388]	; (80032dc <HAL_RCC_ClockConfig+0x1b0>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <HAL_RCC_ClockConfig+0x1b0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0b0      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d04c      	beq.n	8003216 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d107      	bne.n	8003194 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003184:	4b56      	ldr	r3, [pc, #344]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d121      	bne.n	80031d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e09e      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d107      	bne.n	80031ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319c:	4b50      	ldr	r3, [pc, #320]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d115      	bne.n	80031d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e092      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031b4:	4b4a      	ldr	r3, [pc, #296]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e086      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031c4:	4b46      	ldr	r3, [pc, #280]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d101      	bne.n	80031d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e07e      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031d4:	4b42      	ldr	r3, [pc, #264]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f023 0203 	bic.w	r2, r3, #3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	493f      	ldr	r1, [pc, #252]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e6:	f7fd fd05 	bl	8000bf4 <HAL_GetTick>
 80031ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ee:	f7fd fd01 	bl	8000bf4 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e066      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003204:	4b36      	ldr	r3, [pc, #216]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 020c 	and.w	r2, r3, #12
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	429a      	cmp	r2, r3
 8003214:	d1eb      	bne.n	80031ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d008      	beq.n	8003234 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003222:	4b2f      	ldr	r3, [pc, #188]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	492c      	ldr	r1, [pc, #176]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003234:	4b29      	ldr	r3, [pc, #164]	; (80032dc <HAL_RCC_ClockConfig+0x1b0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d210      	bcs.n	8003264 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b26      	ldr	r3, [pc, #152]	; (80032dc <HAL_RCC_ClockConfig+0x1b0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0207 	bic.w	r2, r3, #7
 800324a:	4924      	ldr	r1, [pc, #144]	; (80032dc <HAL_RCC_ClockConfig+0x1b0>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b22      	ldr	r3, [pc, #136]	; (80032dc <HAL_RCC_ClockConfig+0x1b0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e036      	b.n	80032d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003270:	4b1b      	ldr	r3, [pc, #108]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4918      	ldr	r1, [pc, #96]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328e:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4910      	ldr	r1, [pc, #64]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032a2:	f000 f825 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 80032a6:	4601      	mov	r1, r0
 80032a8:	4b0d      	ldr	r3, [pc, #52]	; (80032e0 <HAL_RCC_ClockConfig+0x1b4>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	4a0c      	ldr	r2, [pc, #48]	; (80032e4 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	5cd3      	ldrb	r3, [r2, r3]
 80032b6:	f003 031f 	and.w	r3, r3, #31
 80032ba:	fa21 f303 	lsr.w	r3, r1, r3
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fc44 	bl	8000b54 <HAL_InitTick>
 80032cc:	4603      	mov	r3, r0
 80032ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80032d0:	7afb      	ldrb	r3, [r7, #11]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40022000 	.word	0x40022000
 80032e0:	40021000 	.word	0x40021000
 80032e4:	0800409c 	.word	0x0800409c
 80032e8:	20000004 	.word	0x20000004
 80032ec:	20000008 	.word	0x20000008

080032f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b089      	sub	sp, #36	; 0x24
 80032f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	2300      	movs	r3, #0
 80032fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032fe:	4b3d      	ldr	r3, [pc, #244]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003308:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x104>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	f003 0303 	and.w	r3, r3, #3
 8003310:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_RCC_GetSysClockFreq+0x34>
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b0c      	cmp	r3, #12
 800331c:	d121      	bne.n	8003362 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d11e      	bne.n	8003362 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003324:	4b33      	ldr	r3, [pc, #204]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0308 	and.w	r3, r3, #8
 800332c:	2b00      	cmp	r3, #0
 800332e:	d107      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003330:	4b30      	ldr	r3, [pc, #192]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003332:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003336:	0a1b      	lsrs	r3, r3, #8
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e005      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003340:	4b2c      	ldr	r3, [pc, #176]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800334c:	4a2a      	ldr	r2, [pc, #168]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800334e:	69fb      	ldr	r3, [r7, #28]
 8003350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003354:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10d      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003360:	e00a      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d102      	bne.n	800336e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003368:	4b24      	ldr	r3, [pc, #144]	; (80033fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	e004      	b.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d101      	bne.n	8003378 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003374:	4b22      	ldr	r3, [pc, #136]	; (8003400 <HAL_RCC_GetSysClockFreq+0x110>)
 8003376:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d133      	bne.n	80033e6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800337e:	4b1d      	ldr	r3, [pc, #116]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f003 0303 	and.w	r3, r3, #3
 8003386:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d002      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0xa4>
 800338e:	2b03      	cmp	r3, #3
 8003390:	d003      	beq.n	800339a <HAL_RCC_GetSysClockFreq+0xaa>
 8003392:	e005      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003394:	4b19      	ldr	r3, [pc, #100]	; (80033fc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003396:	617b      	str	r3, [r7, #20]
      break;
 8003398:	e005      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800339a:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_RCC_GetSysClockFreq+0x110>)
 800339c:	617b      	str	r3, [r7, #20]
      break;
 800339e:	e002      	b.n	80033a6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	617b      	str	r3, [r7, #20]
      break;
 80033a4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	3301      	adds	r3, #1
 80033b2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	fb02 f203 	mul.w	r2, r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ca:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <HAL_RCC_GetSysClockFreq+0x104>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	0e5b      	lsrs	r3, r3, #25
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	3301      	adds	r3, #1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033e6:	69bb      	ldr	r3, [r7, #24]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3724      	adds	r7, #36	; 0x24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr
 80033f4:	40021000 	.word	0x40021000
 80033f8:	080040b4 	.word	0x080040b4
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	007a1200 	.word	0x007a1200

08003404 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_GetHCLKFreq+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000004 	.word	0x20000004

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003420:	f7ff fff0 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003424:	4601      	mov	r1, r0
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4a04      	ldr	r2, [pc, #16]	; (8003444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003432:	5cd3      	ldrb	r3, [r2, r3]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	fa21 f303 	lsr.w	r3, r1, r3
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	40021000 	.word	0x40021000
 8003444:	080040ac 	.word	0x080040ac

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800344c:	f7ff ffda 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003450:	4601      	mov	r1, r0
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	0adb      	lsrs	r3, r3, #11
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4a04      	ldr	r2, [pc, #16]	; (8003470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800345e:	5cd3      	ldrb	r3, [r2, r3]
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	40021000 	.word	0x40021000
 8003470:	080040ac 	.word	0x080040ac

08003474 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800347c:	2300      	movs	r3, #0
 800347e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003480:	4b2a      	ldr	r3, [pc, #168]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800348c:	f7ff f984 	bl	8002798 <HAL_PWREx_GetVoltageRange>
 8003490:	6178      	str	r0, [r7, #20]
 8003492:	e014      	b.n	80034be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003494:	4b25      	ldr	r3, [pc, #148]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003498:	4a24      	ldr	r2, [pc, #144]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6593      	str	r3, [r2, #88]	; 0x58
 80034a0:	4b22      	ldr	r3, [pc, #136]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80034ac:	f7ff f974 	bl	8002798 <HAL_PWREx_GetVoltageRange>
 80034b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80034b2:	4b1e      	ldr	r3, [pc, #120]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b6:	4a1d      	ldr	r2, [pc, #116]	; (800352c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80034b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c4:	d10b      	bne.n	80034de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b80      	cmp	r3, #128	; 0x80
 80034ca:	d919      	bls.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2ba0      	cmp	r3, #160	; 0xa0
 80034d0:	d902      	bls.n	80034d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034d2:	2302      	movs	r3, #2
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	e013      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034d8:	2301      	movs	r3, #1
 80034da:	613b      	str	r3, [r7, #16]
 80034dc:	e010      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b80      	cmp	r3, #128	; 0x80
 80034e2:	d902      	bls.n	80034ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034e4:	2303      	movs	r3, #3
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	e00a      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b80      	cmp	r3, #128	; 0x80
 80034ee:	d102      	bne.n	80034f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034f0:	2302      	movs	r3, #2
 80034f2:	613b      	str	r3, [r7, #16]
 80034f4:	e004      	b.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b70      	cmp	r3, #112	; 0x70
 80034fa:	d101      	bne.n	8003500 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034fc:	2301      	movs	r3, #1
 80034fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 0207 	bic.w	r2, r3, #7
 8003508:	4909      	ldr	r1, [pc, #36]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003510:	4b07      	ldr	r3, [pc, #28]	; (8003530 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	40022000 	.word	0x40022000

08003534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800353c:	2300      	movs	r3, #0
 800353e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003540:	2300      	movs	r3, #0
 8003542:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 809e 	beq.w	800368e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003552:	2300      	movs	r3, #0
 8003554:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003556:	4b46      	ldr	r3, [pc, #280]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003562:	2301      	movs	r3, #1
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003566:	2300      	movs	r3, #0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00d      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	4a3f      	ldr	r2, [pc, #252]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003576:	6593      	str	r3, [r2, #88]	; 0x58
 8003578:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003584:	2301      	movs	r3, #1
 8003586:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003588:	4b3a      	ldr	r3, [pc, #232]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a39      	ldr	r2, [pc, #228]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800358e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003592:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003594:	f7fd fb2e 	bl	8000bf4 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800359a:	e009      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800359c:	f7fd fb2a 	bl	8000bf4 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d902      	bls.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	74fb      	strb	r3, [r7, #19]
        break;
 80035ae:	e005      	b.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035b0:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0ef      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d15a      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035c2:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d01e      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d019      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f0:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035fa:	4b1d      	ldr	r3, [pc, #116]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80035fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003600:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800360a:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d016      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800361c:	f7fd faea 	bl	8000bf4 <HAL_GetTick>
 8003620:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003622:	e00b      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003624:	f7fd fae6 	bl	8000bf4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003632:	4293      	cmp	r3, r2
 8003634:	d902      	bls.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	74fb      	strb	r3, [r7, #19]
            break;
 800363a:	e006      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f003 0302 	and.w	r3, r3, #2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d0ec      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800364a:	7cfb      	ldrb	r3, [r7, #19]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003650:	4b07      	ldr	r3, [pc, #28]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003656:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4904      	ldr	r1, [pc, #16]	; (8003670 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003666:	e009      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003668:	7cfb      	ldrb	r3, [r7, #19]
 800366a:	74bb      	strb	r3, [r7, #18]
 800366c:	e006      	b.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x148>
 800366e:	bf00      	nop
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367c:	7c7b      	ldrb	r3, [r7, #17]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003682:	4b6e      	ldr	r3, [pc, #440]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003686:	4a6d      	ldr	r2, [pc, #436]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800369a:	4b68      	ldr	r3, [pc, #416]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800369c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a0:	f023 0203 	bic.w	r2, r3, #3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	4964      	ldr	r1, [pc, #400]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036bc:	4b5f      	ldr	r3, [pc, #380]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f023 020c 	bic.w	r2, r3, #12
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	495c      	ldr	r1, [pc, #368]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00a      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036de:	4b57      	ldr	r3, [pc, #348]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4953      	ldr	r1, [pc, #332]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0320 	and.w	r3, r3, #32
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003700:	4b4e      	ldr	r3, [pc, #312]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	494b      	ldr	r1, [pc, #300]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00a      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003722:	4b46      	ldr	r3, [pc, #280]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4942      	ldr	r1, [pc, #264]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003732:	4313      	orrs	r3, r2
 8003734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003744:	4b3d      	ldr	r3, [pc, #244]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	493a      	ldr	r1, [pc, #232]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003754:	4313      	orrs	r3, r2
 8003756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00a      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003766:	4b35      	ldr	r3, [pc, #212]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800376c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	695b      	ldr	r3, [r3, #20]
 8003774:	4931      	ldr	r1, [pc, #196]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003776:	4313      	orrs	r3, r2
 8003778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00a      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003788:	4b2c      	ldr	r3, [pc, #176]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	4929      	ldr	r1, [pc, #164]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00a      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037aa:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	4920      	ldr	r1, [pc, #128]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d015      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037da:	4918      	ldr	r1, [pc, #96]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037dc:	4313      	orrs	r3, r2
 80037de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037ea:	d105      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ec:	4b13      	ldr	r3, [pc, #76]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	4a12      	ldr	r2, [pc, #72]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80037f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d015      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003804:	4b0d      	ldr	r3, [pc, #52]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003812:	490a      	ldr	r1, [pc, #40]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003822:	d105      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	4a04      	ldr	r2, [pc, #16]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800382a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800382e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003830:	7cbb      	ldrb	r3, [r7, #18]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3718      	adds	r7, #24
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000

08003840 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003844:	4b05      	ldr	r3, [pc, #20]	; (800385c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a04      	ldr	r2, [pc, #16]	; (800385c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800384a:	f043 0304 	orr.w	r3, r3, #4
 800384e:	6013      	str	r3, [r2, #0]
}
 8003850:	bf00      	nop
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	40021000 	.word	0x40021000

08003860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e040      	b.n	80038f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd f85c 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f82c 	bl	80038fc <UART_SetConfig>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e022      	b.n	80038f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f000 fa56 	bl	8003d68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0201 	orr.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fadd 	bl	8003eac <UART_CheckIdleState>
 80038f2:	4603      	mov	r3, r0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038fc:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003900:	b088      	sub	sp, #32
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	431a      	orrs	r2, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	4313      	orrs	r3, r2
 8003920:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	4baa      	ldr	r3, [pc, #680]	; (8003bd4 <UART_SetConfig+0x2d8>)
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	69f9      	ldr	r1, [r7, #28]
 8003932:	430b      	orrs	r3, r1
 8003934:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4aa0      	ldr	r2, [pc, #640]	; (8003bd8 <UART_SetConfig+0x2dc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d004      	beq.n	8003966 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	4313      	orrs	r3, r2
 8003964:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	430a      	orrs	r2, r1
 8003978:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a97      	ldr	r2, [pc, #604]	; (8003bdc <UART_SetConfig+0x2e0>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d121      	bne.n	80039c8 <UART_SetConfig+0xcc>
 8003984:	4b96      	ldr	r3, [pc, #600]	; (8003be0 <UART_SetConfig+0x2e4>)
 8003986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398a:	f003 0303 	and.w	r3, r3, #3
 800398e:	2b03      	cmp	r3, #3
 8003990:	d816      	bhi.n	80039c0 <UART_SetConfig+0xc4>
 8003992:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <UART_SetConfig+0x9c>)
 8003994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003998:	080039a9 	.word	0x080039a9
 800399c:	080039b5 	.word	0x080039b5
 80039a0:	080039af 	.word	0x080039af
 80039a4:	080039bb 	.word	0x080039bb
 80039a8:	2301      	movs	r3, #1
 80039aa:	76fb      	strb	r3, [r7, #27]
 80039ac:	e098      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 80039ae:	2302      	movs	r3, #2
 80039b0:	76fb      	strb	r3, [r7, #27]
 80039b2:	e095      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 80039b4:	2304      	movs	r3, #4
 80039b6:	76fb      	strb	r3, [r7, #27]
 80039b8:	e092      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 80039ba:	2308      	movs	r3, #8
 80039bc:	76fb      	strb	r3, [r7, #27]
 80039be:	e08f      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 80039c0:	2310      	movs	r3, #16
 80039c2:	76fb      	strb	r3, [r7, #27]
 80039c4:	bf00      	nop
 80039c6:	e08b      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a85      	ldr	r2, [pc, #532]	; (8003be4 <UART_SetConfig+0x2e8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d134      	bne.n	8003a3c <UART_SetConfig+0x140>
 80039d2:	4b83      	ldr	r3, [pc, #524]	; (8003be0 <UART_SetConfig+0x2e4>)
 80039d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d8:	f003 030c 	and.w	r3, r3, #12
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	d829      	bhi.n	8003a34 <UART_SetConfig+0x138>
 80039e0:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0xec>)
 80039e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e6:	bf00      	nop
 80039e8:	08003a1d 	.word	0x08003a1d
 80039ec:	08003a35 	.word	0x08003a35
 80039f0:	08003a35 	.word	0x08003a35
 80039f4:	08003a35 	.word	0x08003a35
 80039f8:	08003a29 	.word	0x08003a29
 80039fc:	08003a35 	.word	0x08003a35
 8003a00:	08003a35 	.word	0x08003a35
 8003a04:	08003a35 	.word	0x08003a35
 8003a08:	08003a23 	.word	0x08003a23
 8003a0c:	08003a35 	.word	0x08003a35
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a35 	.word	0x08003a35
 8003a18:	08003a2f 	.word	0x08003a2f
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	76fb      	strb	r3, [r7, #27]
 8003a20:	e05e      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003a22:	2302      	movs	r3, #2
 8003a24:	76fb      	strb	r3, [r7, #27]
 8003a26:	e05b      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	76fb      	strb	r3, [r7, #27]
 8003a2c:	e058      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	76fb      	strb	r3, [r7, #27]
 8003a32:	e055      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003a34:	2310      	movs	r3, #16
 8003a36:	76fb      	strb	r3, [r7, #27]
 8003a38:	bf00      	nop
 8003a3a:	e051      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a69      	ldr	r2, [pc, #420]	; (8003be8 <UART_SetConfig+0x2ec>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d120      	bne.n	8003a88 <UART_SetConfig+0x18c>
 8003a46:	4b66      	ldr	r3, [pc, #408]	; (8003be0 <UART_SetConfig+0x2e4>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d00f      	beq.n	8003a74 <UART_SetConfig+0x178>
 8003a54:	2b10      	cmp	r3, #16
 8003a56:	d802      	bhi.n	8003a5e <UART_SetConfig+0x162>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <UART_SetConfig+0x16c>
 8003a5c:	e010      	b.n	8003a80 <UART_SetConfig+0x184>
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d005      	beq.n	8003a6e <UART_SetConfig+0x172>
 8003a62:	2b30      	cmp	r3, #48	; 0x30
 8003a64:	d009      	beq.n	8003a7a <UART_SetConfig+0x17e>
 8003a66:	e00b      	b.n	8003a80 <UART_SetConfig+0x184>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	76fb      	strb	r3, [r7, #27]
 8003a6c:	e038      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	76fb      	strb	r3, [r7, #27]
 8003a72:	e035      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003a74:	2304      	movs	r3, #4
 8003a76:	76fb      	strb	r3, [r7, #27]
 8003a78:	e032      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003a7a:	2308      	movs	r3, #8
 8003a7c:	76fb      	strb	r3, [r7, #27]
 8003a7e:	e02f      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003a80:	2310      	movs	r3, #16
 8003a82:	76fb      	strb	r3, [r7, #27]
 8003a84:	bf00      	nop
 8003a86:	e02b      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	; (8003bd8 <UART_SetConfig+0x2dc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d124      	bne.n	8003adc <UART_SetConfig+0x1e0>
 8003a92:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <UART_SetConfig+0x2e4>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa0:	d012      	beq.n	8003ac8 <UART_SetConfig+0x1cc>
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa6:	d802      	bhi.n	8003aae <UART_SetConfig+0x1b2>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d007      	beq.n	8003abc <UART_SetConfig+0x1c0>
 8003aac:	e012      	b.n	8003ad4 <UART_SetConfig+0x1d8>
 8003aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ab2:	d006      	beq.n	8003ac2 <UART_SetConfig+0x1c6>
 8003ab4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ab8:	d009      	beq.n	8003ace <UART_SetConfig+0x1d2>
 8003aba:	e00b      	b.n	8003ad4 <UART_SetConfig+0x1d8>
 8003abc:	2300      	movs	r3, #0
 8003abe:	76fb      	strb	r3, [r7, #27]
 8003ac0:	e00e      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	76fb      	strb	r3, [r7, #27]
 8003ac6:	e00b      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	76fb      	strb	r3, [r7, #27]
 8003acc:	e008      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003ace:	2308      	movs	r3, #8
 8003ad0:	76fb      	strb	r3, [r7, #27]
 8003ad2:	e005      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	76fb      	strb	r3, [r7, #27]
 8003ad8:	bf00      	nop
 8003ada:	e001      	b.n	8003ae0 <UART_SetConfig+0x1e4>
 8003adc:	2310      	movs	r3, #16
 8003ade:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a3c      	ldr	r2, [pc, #240]	; (8003bd8 <UART_SetConfig+0x2dc>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	f040 8082 	bne.w	8003bf0 <UART_SetConfig+0x2f4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003aec:	7efb      	ldrb	r3, [r7, #27]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d823      	bhi.n	8003b3a <UART_SetConfig+0x23e>
 8003af2:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x1fc>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b3b 	.word	0x08003b3b
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003b3b 	.word	0x08003b3b
 8003b08:	08003b2b 	.word	0x08003b2b
 8003b0c:	08003b3b 	.word	0x08003b3b
 8003b10:	08003b3b 	.word	0x08003b3b
 8003b14:	08003b3b 	.word	0x08003b3b
 8003b18:	08003b33 	.word	0x08003b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7ff fc7e 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8003b20:	6178      	str	r0, [r7, #20]
        break;
 8003b22:	e00f      	b.n	8003b44 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b24:	4b31      	ldr	r3, [pc, #196]	; (8003bec <UART_SetConfig+0x2f0>)
 8003b26:	617b      	str	r3, [r7, #20]
        break;
 8003b28:	e00c      	b.n	8003b44 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b2a:	f7ff fbe1 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8003b2e:	6178      	str	r0, [r7, #20]
        break;
 8003b30:	e008      	b.n	8003b44 <UART_SetConfig+0x248>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b36:	617b      	str	r3, [r7, #20]
        break;
 8003b38:	e004      	b.n	8003b44 <UART_SetConfig+0x248>
      default:
        pclk = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	76bb      	strb	r3, [r7, #26]
        break;
 8003b42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f000 8100 	beq.w	8003d4c <UART_SetConfig+0x450>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d305      	bcc.n	8003b68 <UART_SetConfig+0x26c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d902      	bls.n	8003b6e <UART_SetConfig+0x272>
      {
        ret = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	76bb      	strb	r3, [r7, #26]
 8003b6c:	e0ee      	b.n	8003d4c <UART_SetConfig+0x450>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	4619      	mov	r1, r3
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	f04f 0400 	mov.w	r4, #0
 8003b7e:	0214      	lsls	r4, r2, #8
 8003b80:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003b84:	020b      	lsls	r3, r1, #8
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6852      	ldr	r2, [r2, #4]
 8003b8a:	0852      	lsrs	r2, r2, #1
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	eb13 0b01 	adds.w	fp, r3, r1
 8003b96:	eb44 0c02 	adc.w	ip, r4, r2
 8003b9a:	4658      	mov	r0, fp
 8003b9c:	4661      	mov	r1, ip
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f04f 0400 	mov.w	r4, #0
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	4623      	mov	r3, r4
 8003baa:	f7fc fb0f 	bl	80001cc <__aeabi_uldivmod>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	460c      	mov	r4, r1
 8003bb2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bba:	d308      	bcc.n	8003bce <UART_SetConfig+0x2d2>
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bc2:	d204      	bcs.n	8003bce <UART_SetConfig+0x2d2>
        {
          huart->Instance->BRR = usartdiv;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	60da      	str	r2, [r3, #12]
 8003bcc:	e0be      	b.n	8003d4c <UART_SetConfig+0x450>
        }
        else
        {
          ret = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	76bb      	strb	r3, [r7, #26]
 8003bd2:	e0bb      	b.n	8003d4c <UART_SetConfig+0x450>
 8003bd4:	efff69f3 	.word	0xefff69f3
 8003bd8:	40008000 	.word	0x40008000
 8003bdc:	40013800 	.word	0x40013800
 8003be0:	40021000 	.word	0x40021000
 8003be4:	40004400 	.word	0x40004400
 8003be8:	40004800 	.word	0x40004800
 8003bec:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf8:	d15c      	bne.n	8003cb4 <UART_SetConfig+0x3b8>
  {
    switch (clocksource)
 8003bfa:	7efb      	ldrb	r3, [r7, #27]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d828      	bhi.n	8003c52 <UART_SetConfig+0x356>
 8003c00:	a201      	add	r2, pc, #4	; (adr r2, 8003c08 <UART_SetConfig+0x30c>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c2d 	.word	0x08003c2d
 8003c0c:	08003c35 	.word	0x08003c35
 8003c10:	08003c3d 	.word	0x08003c3d
 8003c14:	08003c53 	.word	0x08003c53
 8003c18:	08003c43 	.word	0x08003c43
 8003c1c:	08003c53 	.word	0x08003c53
 8003c20:	08003c53 	.word	0x08003c53
 8003c24:	08003c53 	.word	0x08003c53
 8003c28:	08003c4b 	.word	0x08003c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c2c:	f7ff fbf6 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8003c30:	6178      	str	r0, [r7, #20]
        break;
 8003c32:	e013      	b.n	8003c5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c34:	f7ff fc08 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 8003c38:	6178      	str	r0, [r7, #20]
        break;
 8003c3a:	e00f      	b.n	8003c5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c3c:	4b49      	ldr	r3, [pc, #292]	; (8003d64 <UART_SetConfig+0x468>)
 8003c3e:	617b      	str	r3, [r7, #20]
        break;
 8003c40:	e00c      	b.n	8003c5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c42:	f7ff fb55 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8003c46:	6178      	str	r0, [r7, #20]
        break;
 8003c48:	e008      	b.n	8003c5c <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4e:	617b      	str	r3, [r7, #20]
        break;
 8003c50:	e004      	b.n	8003c5c <UART_SetConfig+0x360>
      default:
        pclk = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	76bb      	strb	r3, [r7, #26]
        break;
 8003c5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d074      	beq.n	8003d4c <UART_SetConfig+0x450>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	005a      	lsls	r2, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	441a      	add	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b0f      	cmp	r3, #15
 8003c7e:	d916      	bls.n	8003cae <UART_SetConfig+0x3b2>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c86:	d212      	bcs.n	8003cae <UART_SetConfig+0x3b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	f023 030f 	bic.w	r3, r3, #15
 8003c90:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	89fb      	ldrh	r3, [r7, #14]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	89fa      	ldrh	r2, [r7, #14]
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	e04e      	b.n	8003d4c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	76bb      	strb	r3, [r7, #26]
 8003cb2:	e04b      	b.n	8003d4c <UART_SetConfig+0x450>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cb4:	7efb      	ldrb	r3, [r7, #27]
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d827      	bhi.n	8003d0a <UART_SetConfig+0x40e>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0x3c4>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003ce5 	.word	0x08003ce5
 8003cc4:	08003ced 	.word	0x08003ced
 8003cc8:	08003cf5 	.word	0x08003cf5
 8003ccc:	08003d0b 	.word	0x08003d0b
 8003cd0:	08003cfb 	.word	0x08003cfb
 8003cd4:	08003d0b 	.word	0x08003d0b
 8003cd8:	08003d0b 	.word	0x08003d0b
 8003cdc:	08003d0b 	.word	0x08003d0b
 8003ce0:	08003d03 	.word	0x08003d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ce4:	f7ff fb9a 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8003ce8:	6178      	str	r0, [r7, #20]
        break;
 8003cea:	e013      	b.n	8003d14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cec:	f7ff fbac 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 8003cf0:	6178      	str	r0, [r7, #20]
        break;
 8003cf2:	e00f      	b.n	8003d14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <UART_SetConfig+0x468>)
 8003cf6:	617b      	str	r3, [r7, #20]
        break;
 8003cf8:	e00c      	b.n	8003d14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfa:	f7ff faf9 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8003cfe:	6178      	str	r0, [r7, #20]
        break;
 8003d00:	e008      	b.n	8003d14 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d06:	617b      	str	r3, [r7, #20]
        break;
 8003d08:	e004      	b.n	8003d14 <UART_SetConfig+0x418>
      default:
        pclk = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	76bb      	strb	r3, [r7, #26]
        break;
 8003d12:	bf00      	nop
    }

    if (pclk != 0U)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <UART_SetConfig+0x450>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	085a      	lsrs	r2, r3, #1
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	441a      	add	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b0f      	cmp	r3, #15
 8003d34:	d908      	bls.n	8003d48 <UART_SetConfig+0x44c>
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3c:	d204      	bcs.n	8003d48 <UART_SetConfig+0x44c>
      {
        huart->Instance->BRR = usartdiv;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	60da      	str	r2, [r3, #12]
 8003d46:	e001      	b.n	8003d4c <UART_SetConfig+0x450>
      }
      else
      {
        ret = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003d58:	7ebb      	ldrb	r3, [r7, #26]
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3720      	adds	r7, #32
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8003d64:	00f42400 	.word	0x00f42400

08003d68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b083      	sub	sp, #12
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00a      	beq.n	8003d92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00a      	beq.n	8003db4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db8:	f003 0304 	and.w	r3, r3, #4
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	f003 0320 	and.w	r3, r3, #32
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00a      	beq.n	8003e3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01a      	beq.n	8003e7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e66:	d10a      	bne.n	8003e7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003eba:	f7fc fe9b 	bl	8000bf4 <HAL_GetTick>
 8003ebe:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0308 	and.w	r3, r3, #8
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d10e      	bne.n	8003eec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ece:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f82a 	bl	8003f36 <UART_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e020      	b.n	8003f2e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d10e      	bne.n	8003f18 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003efa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003efe:	9300      	str	r3, [sp, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f814 	bl	8003f36 <UART_WaitOnFlagUntilTimeout>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d001      	beq.n	8003f18 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e00a      	b.n	8003f2e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2220      	movs	r2, #32
 8003f22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b084      	sub	sp, #16
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	60f8      	str	r0, [r7, #12]
 8003f3e:	60b9      	str	r1, [r7, #8]
 8003f40:	603b      	str	r3, [r7, #0]
 8003f42:	4613      	mov	r3, r2
 8003f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f46:	e05d      	b.n	8004004 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f4e:	d059      	beq.n	8004004 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f50:	f7fc fe50 	bl	8000bf4 <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d302      	bcc.n	8003f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d11b      	bne.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f74:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e042      	b.n	8004024 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d02b      	beq.n	8004004 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fba:	d123      	bne.n	8004004 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fd4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e00f      	b.n	8004024 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69da      	ldr	r2, [r3, #28]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4013      	ands	r3, r2
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	461a      	mov	r2, r3
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	429a      	cmp	r2, r3
 8004020:	d092      	beq.n	8003f48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	4e0d      	ldr	r6, [pc, #52]	; (8004064 <__libc_init_array+0x38>)
 8004030:	4c0d      	ldr	r4, [pc, #52]	; (8004068 <__libc_init_array+0x3c>)
 8004032:	1ba4      	subs	r4, r4, r6
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	2500      	movs	r5, #0
 8004038:	42a5      	cmp	r5, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	4e0b      	ldr	r6, [pc, #44]	; (800406c <__libc_init_array+0x40>)
 800403e:	4c0c      	ldr	r4, [pc, #48]	; (8004070 <__libc_init_array+0x44>)
 8004040:	f000 f820 	bl	8004084 <_init>
 8004044:	1ba4      	subs	r4, r4, r6
 8004046:	10a4      	asrs	r4, r4, #2
 8004048:	2500      	movs	r5, #0
 800404a:	42a5      	cmp	r5, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004054:	4798      	blx	r3
 8004056:	3501      	adds	r5, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800405e:	4798      	blx	r3
 8004060:	3501      	adds	r5, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	080040ec 	.word	0x080040ec
 8004068:	080040ec 	.word	0x080040ec
 800406c:	080040ec 	.word	0x080040ec
 8004070:	080040f0 	.word	0x080040f0

08004074 <memset>:
 8004074:	4402      	add	r2, r0
 8004076:	4603      	mov	r3, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	d100      	bne.n	800407e <memset+0xa>
 800407c:	4770      	bx	lr
 800407e:	f803 1b01 	strb.w	r1, [r3], #1
 8004082:	e7f9      	b.n	8004078 <memset+0x4>

08004084 <_init>:
 8004084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004086:	bf00      	nop
 8004088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800408a:	bc08      	pop	{r3}
 800408c:	469e      	mov	lr, r3
 800408e:	4770      	bx	lr

08004090 <_fini>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	bf00      	nop
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr
